# coding: utf-8

"""
    UpGuard CyberRisk API

    Access information from the CyberRisk platform programmatically using this API.  You can find or generate an API key to access this API in your CyberRisk Account Settings. Please authorize all requests by setting the \"Authorization\" header to your api key.  The base url for all public endpoints is https://cyber-risk.upguard.com/api/public  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from upguard.configuration import Configuration


class DataLeaksDisclosure(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_disclosed': 'datetime',
        'description': 'str',
        'id': 'int',
        'image': 'str',
        'implication': 'str',
        'payload': 'str',
        'severity': 'int',
        'significance': 'str',
        'source': 'str',
        'status': 'str',
        'url': 'str'
    }

    attribute_map = {
        'date_disclosed': 'date_disclosed',
        'description': 'description',
        'id': 'id',
        'image': 'image',
        'implication': 'implication',
        'payload': 'payload',
        'severity': 'severity',
        'significance': 'significance',
        'source': 'source',
        'status': 'status',
        'url': 'url'
    }

    def __init__(self, date_disclosed=None, description=None, id=None, image=None, implication=None, payload=None, severity=None, significance=None, source=None, status=None, url=None, _configuration=None):  # noqa: E501
        """DataLeaksDisclosure - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._date_disclosed = None
        self._description = None
        self._id = None
        self._image = None
        self._implication = None
        self._payload = None
        self._severity = None
        self._significance = None
        self._source = None
        self._status = None
        self._url = None
        self.discriminator = None

        if date_disclosed is not None:
            self.date_disclosed = date_disclosed
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if image is not None:
            self.image = image
        if implication is not None:
            self.implication = implication
        if payload is not None:
            self.payload = payload
        if severity is not None:
            self.severity = severity
        if significance is not None:
            self.significance = significance
        if source is not None:
            self.source = source
        if status is not None:
            self.status = status
        if url is not None:
            self.url = url

    @property
    def date_disclosed(self):
        """Gets the date_disclosed of this DataLeaksDisclosure.  # noqa: E501

        The date this disclosure was created (RFC 3339)  # noqa: E501

        :return: The date_disclosed of this DataLeaksDisclosure.  # noqa: E501
        :rtype: datetime
        """
        return self._date_disclosed

    @date_disclosed.setter
    def date_disclosed(self, date_disclosed):
        """Sets the date_disclosed of this DataLeaksDisclosure.

        The date this disclosure was created (RFC 3339)  # noqa: E501

        :param date_disclosed: The date_disclosed of this DataLeaksDisclosure.  # noqa: E501
        :type: datetime
        """

        self._date_disclosed = date_disclosed

    @property
    def description(self):
        """Gets the description of this DataLeaksDisclosure.  # noqa: E501

        Description of the disclosure  # noqa: E501

        :return: The description of this DataLeaksDisclosure.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataLeaksDisclosure.

        Description of the disclosure  # noqa: E501

        :param description: The description of this DataLeaksDisclosure.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this DataLeaksDisclosure.  # noqa: E501

        The ID of the disclosure  # noqa: E501

        :return: The id of this DataLeaksDisclosure.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataLeaksDisclosure.

        The ID of the disclosure  # noqa: E501

        :param id: The id of this DataLeaksDisclosure.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this DataLeaksDisclosure.  # noqa: E501

        An image/screenshot of the disclosure  # noqa: E501

        :return: The image of this DataLeaksDisclosure.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this DataLeaksDisclosure.

        An image/screenshot of the disclosure  # noqa: E501

        :param image: The image of this DataLeaksDisclosure.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def implication(self):
        """Gets the implication of this DataLeaksDisclosure.  # noqa: E501

        The nature of the risk  # noqa: E501

        :return: The implication of this DataLeaksDisclosure.  # noqa: E501
        :rtype: str
        """
        return self._implication

    @implication.setter
    def implication(self, implication):
        """Sets the implication of this DataLeaksDisclosure.

        The nature of the risk  # noqa: E501

        :param implication: The implication of this DataLeaksDisclosure.  # noqa: E501
        :type: str
        """

        self._implication = implication

    @property
    def payload(self):
        """Gets the payload of this DataLeaksDisclosure.  # noqa: E501

        The JSON payload of the finding, if applicable  # noqa: E501

        :return: The payload of this DataLeaksDisclosure.  # noqa: E501
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this DataLeaksDisclosure.

        The JSON payload of the finding, if applicable  # noqa: E501

        :param payload: The payload of this DataLeaksDisclosure.  # noqa: E501
        :type: str
        """

        self._payload = payload

    @property
    def severity(self):
        """Gets the severity of this DataLeaksDisclosure.  # noqa: E501

        The severity of the disclosure, between 1 and 10  # noqa: E501

        :return: The severity of this DataLeaksDisclosure.  # noqa: E501
        :rtype: int
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this DataLeaksDisclosure.

        The severity of the disclosure, between 1 and 10  # noqa: E501

        :param severity: The severity of this DataLeaksDisclosure.  # noqa: E501
        :type: int
        """

        self._severity = severity

    @property
    def significance(self):
        """Gets the significance of this DataLeaksDisclosure.  # noqa: E501

        A more detailed explanation of the significance/severity of the disclosure  # noqa: E501

        :return: The significance of this DataLeaksDisclosure.  # noqa: E501
        :rtype: str
        """
        return self._significance

    @significance.setter
    def significance(self, significance):
        """Sets the significance of this DataLeaksDisclosure.

        A more detailed explanation of the significance/severity of the disclosure  # noqa: E501

        :param significance: The significance of this DataLeaksDisclosure.  # noqa: E501
        :type: str
        """

        self._significance = significance

    @property
    def source(self):
        """Gets the source of this DataLeaksDisclosure.  # noqa: E501

        The person or source the finding has been attributed to  # noqa: E501

        :return: The source of this DataLeaksDisclosure.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DataLeaksDisclosure.

        The person or source the finding has been attributed to  # noqa: E501

        :param source: The source of this DataLeaksDisclosure.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def status(self):
        """Gets the status of this DataLeaksDisclosure.  # noqa: E501

        Current status of the disclosure  # noqa: E501

        :return: The status of this DataLeaksDisclosure.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DataLeaksDisclosure.

        Current status of the disclosure  # noqa: E501

        :param status: The status of this DataLeaksDisclosure.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def url(self):
        """Gets the url of this DataLeaksDisclosure.  # noqa: E501

        The URL to the finding  # noqa: E501

        :return: The url of this DataLeaksDisclosure.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DataLeaksDisclosure.

        The URL to the finding  # noqa: E501

        :param url: The url of this DataLeaksDisclosure.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataLeaksDisclosure, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataLeaksDisclosure):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataLeaksDisclosure):
            return True

        return self.to_dict() != other.to_dict()
