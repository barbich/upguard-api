# coding: utf-8

"""
    UpGuard CyberRisk API

    Access information from the CyberRisk platform programmatically using this API.  You can find or generate an API key to access this API in your CyberRisk Account Settings. Please authorize all requests by setting the \"Authorization\" header to your api key.  The base url for all public endpoints is https://cyber-risk.upguard.com/api/public  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from upguard.configuration import Configuration


class SummaryDiffGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'diffs': 'list[SummaryDiff]',
        'group_id': 'str',
        'highest_severity': 'Severity',
        'highest_severity_name': 'str',
        'name': 'str'
    }

    attribute_map = {
        'diffs': 'diffs',
        'group_id': 'groupID',
        'highest_severity': 'highestSeverity',
        'highest_severity_name': 'highestSeverityName',
        'name': 'name'
    }

    def __init__(self, diffs=None, group_id=None, highest_severity=None, highest_severity_name=None, name=None, _configuration=None):  # noqa: E501
        """SummaryDiffGroup - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._diffs = None
        self._group_id = None
        self._highest_severity = None
        self._highest_severity_name = None
        self._name = None
        self.discriminator = None

        if diffs is not None:
            self.diffs = diffs
        if group_id is not None:
            self.group_id = group_id
        if highest_severity is not None:
            self.highest_severity = highest_severity
        if highest_severity_name is not None:
            self.highest_severity_name = highest_severity_name
        if name is not None:
            self.name = name

    @property
    def diffs(self):
        """Gets the diffs of this SummaryDiffGroup.  # noqa: E501

        The list of risk diffs in this group  # noqa: E501

        :return: The diffs of this SummaryDiffGroup.  # noqa: E501
        :rtype: list[SummaryDiff]
        """
        return self._diffs

    @diffs.setter
    def diffs(self, diffs):
        """Sets the diffs of this SummaryDiffGroup.

        The list of risk diffs in this group  # noqa: E501

        :param diffs: The diffs of this SummaryDiffGroup.  # noqa: E501
        :type: list[SummaryDiff]
        """

        self._diffs = diffs

    @property
    def group_id(self):
        """Gets the group_id of this SummaryDiffGroup.  # noqa: E501

        The ID of the risk group  # noqa: E501

        :return: The group_id of this SummaryDiffGroup.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this SummaryDiffGroup.

        The ID of the risk group  # noqa: E501

        :param group_id: The group_id of this SummaryDiffGroup.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def highest_severity(self):
        """Gets the highest_severity of this SummaryDiffGroup.  # noqa: E501


        :return: The highest_severity of this SummaryDiffGroup.  # noqa: E501
        :rtype: Severity
        """
        return self._highest_severity

    @highest_severity.setter
    def highest_severity(self, highest_severity):
        """Sets the highest_severity of this SummaryDiffGroup.


        :param highest_severity: The highest_severity of this SummaryDiffGroup.  # noqa: E501
        :type: Severity
        """

        self._highest_severity = highest_severity

    @property
    def highest_severity_name(self):
        """Gets the highest_severity_name of this SummaryDiffGroup.  # noqa: E501

        The highest severity of the risks in this group in human-readable form  # noqa: E501

        :return: The highest_severity_name of this SummaryDiffGroup.  # noqa: E501
        :rtype: str
        """
        return self._highest_severity_name

    @highest_severity_name.setter
    def highest_severity_name(self, highest_severity_name):
        """Sets the highest_severity_name of this SummaryDiffGroup.

        The highest severity of the risks in this group in human-readable form  # noqa: E501

        :param highest_severity_name: The highest_severity_name of this SummaryDiffGroup.  # noqa: E501
        :type: str
        """
        allowed_values = ["pass", "info", "low", "medium", "high", "critical"]  # noqa: E501
        if (self._configuration.client_side_validation and
                highest_severity_name not in allowed_values):
            raise ValueError(
                "Invalid value for `highest_severity_name` ({0}), must be one of {1}"  # noqa: E501
                .format(highest_severity_name, allowed_values)
            )

        self._highest_severity_name = highest_severity_name

    @property
    def name(self):
        """Gets the name of this SummaryDiffGroup.  # noqa: E501

        The name of the risk group  # noqa: E501

        :return: The name of this SummaryDiffGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SummaryDiffGroup.

        The name of the risk group  # noqa: E501

        :param name: The name of this SummaryDiffGroup.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SummaryDiffGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SummaryDiffGroup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SummaryDiffGroup):
            return True

        return self.to_dict() != other.to_dict()
