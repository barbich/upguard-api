# coding: utf-8

"""
    UpGuard CyberRisk API

    Access information from the CyberRisk platform programmatically using this API.  You can find or generate an API key to access this API in your CyberRisk Account Settings. Please authorize all requests by setting the \"Authorization\" header to your api key.  The base url for all public endpoints is https://cyber-risk.upguard.com/api/public  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from upguard.configuration import Configuration


class TyposquatPermutationDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'a_records': 'list[str]',
        'country': 'str',
        'date_detected': 'datetime',
        'hostname': 'str',
        'mx_records': 'list[str]',
        'ns_records': 'list[str]',
        'permutation_type': 'PermutationType'
    }

    attribute_map = {
        'a_records': 'a_records',
        'country': 'country',
        'date_detected': 'date_detected',
        'hostname': 'hostname',
        'mx_records': 'mx_records',
        'ns_records': 'ns_records',
        'permutation_type': 'permutation_type'
    }

    def __init__(self, a_records=None, country=None, date_detected=None, hostname=None, mx_records=None, ns_records=None, permutation_type=None, _configuration=None):  # noqa: E501
        """TyposquatPermutationDetail - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._a_records = None
        self._country = None
        self._date_detected = None
        self._hostname = None
        self._mx_records = None
        self._ns_records = None
        self._permutation_type = None
        self.discriminator = None

        if a_records is not None:
            self.a_records = a_records
        if country is not None:
            self.country = country
        if date_detected is not None:
            self.date_detected = date_detected
        if hostname is not None:
            self.hostname = hostname
        if mx_records is not None:
            self.mx_records = mx_records
        if ns_records is not None:
            self.ns_records = ns_records
        if permutation_type is not None:
            self.permutation_type = permutation_type

    @property
    def a_records(self):
        """Gets the a_records of this TyposquatPermutationDetail.  # noqa: E501

        The list of A records associated with the permutation. If no A records are associated with the permutation this field will be omitted.  # noqa: E501

        :return: The a_records of this TyposquatPermutationDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._a_records

    @a_records.setter
    def a_records(self, a_records):
        """Sets the a_records of this TyposquatPermutationDetail.

        The list of A records associated with the permutation. If no A records are associated with the permutation this field will be omitted.  # noqa: E501

        :param a_records: The a_records of this TyposquatPermutationDetail.  # noqa: E501
        :type: list[str]
        """

        self._a_records = a_records

    @property
    def country(self):
        """Gets the country of this TyposquatPermutationDetail.  # noqa: E501

        The country where the permutation is registered. If missing the field will be omitted.  # noqa: E501

        :return: The country of this TyposquatPermutationDetail.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this TyposquatPermutationDetail.

        The country where the permutation is registered. If missing the field will be omitted.  # noqa: E501

        :param country: The country of this TyposquatPermutationDetail.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def date_detected(self):
        """Gets the date_detected of this TyposquatPermutationDetail.  # noqa: E501

        The date the registered permutation was detected in RFC3339 format. If missing this field will be omitted.  # noqa: E501

        :return: The date_detected of this TyposquatPermutationDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._date_detected

    @date_detected.setter
    def date_detected(self, date_detected):
        """Sets the date_detected of this TyposquatPermutationDetail.

        The date the registered permutation was detected in RFC3339 format. If missing this field will be omitted.  # noqa: E501

        :param date_detected: The date_detected of this TyposquatPermutationDetail.  # noqa: E501
        :type: datetime
        """

        self._date_detected = date_detected

    @property
    def hostname(self):
        """Gets the hostname of this TyposquatPermutationDetail.  # noqa: E501

        The hostname of the permutation  # noqa: E501

        :return: The hostname of this TyposquatPermutationDetail.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this TyposquatPermutationDetail.

        The hostname of the permutation  # noqa: E501

        :param hostname: The hostname of this TyposquatPermutationDetail.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def mx_records(self):
        """Gets the mx_records of this TyposquatPermutationDetail.  # noqa: E501

        The list of MX records associated with the permutation. If no MX records are associated with the permutation this field will be omitted.  # noqa: E501

        :return: The mx_records of this TyposquatPermutationDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._mx_records

    @mx_records.setter
    def mx_records(self, mx_records):
        """Sets the mx_records of this TyposquatPermutationDetail.

        The list of MX records associated with the permutation. If no MX records are associated with the permutation this field will be omitted.  # noqa: E501

        :param mx_records: The mx_records of this TyposquatPermutationDetail.  # noqa: E501
        :type: list[str]
        """

        self._mx_records = mx_records

    @property
    def ns_records(self):
        """Gets the ns_records of this TyposquatPermutationDetail.  # noqa: E501

        The list of NS records associated with the permutation. If no NS records are associated with the permutation this field will be omitted.  # noqa: E501

        :return: The ns_records of this TyposquatPermutationDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._ns_records

    @ns_records.setter
    def ns_records(self, ns_records):
        """Sets the ns_records of this TyposquatPermutationDetail.

        The list of NS records associated with the permutation. If no NS records are associated with the permutation this field will be omitted.  # noqa: E501

        :param ns_records: The ns_records of this TyposquatPermutationDetail.  # noqa: E501
        :type: list[str]
        """

        self._ns_records = ns_records

    @property
    def permutation_type(self):
        """Gets the permutation_type of this TyposquatPermutationDetail.  # noqa: E501


        :return: The permutation_type of this TyposquatPermutationDetail.  # noqa: E501
        :rtype: PermutationType
        """
        return self._permutation_type

    @permutation_type.setter
    def permutation_type(self, permutation_type):
        """Sets the permutation_type of this TyposquatPermutationDetail.


        :param permutation_type: The permutation_type of this TyposquatPermutationDetail.  # noqa: E501
        :type: PermutationType
        """

        self._permutation_type = permutation_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TyposquatPermutationDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TyposquatPermutationDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TyposquatPermutationDetail):
            return True

        return self.to_dict() != other.to_dict()
