# coding: utf-8

"""
    UpGuard CyberRisk API

    Access information from the CyberRisk platform programmatically using this API.  You can find or generate an API key to access this API in your CyberRisk Account Settings. Please authorize all requests by setting the \"Authorization\" header to your api key.  The base url for all public endpoints is https://cyber-risk.upguard.com/api/public  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from upguard.configuration import Configuration


class WebhookSampleData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'dict(str, object)',
        'description': 'str',
        'occurred_at': 'datetime',
        'type': 'str'
    }

    attribute_map = {
        'context': 'context',
        'description': 'description',
        'occurred_at': 'occurredAt',
        'type': 'type'
    }

    def __init__(self, context=None, description=None, occurred_at=None, type=None, _configuration=None):  # noqa: E501
        """WebhookSampleData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._context = None
        self._description = None
        self._occurred_at = None
        self._type = None
        self.discriminator = None

        if context is not None:
            self.context = context
        if description is not None:
            self.description = description
        if occurred_at is not None:
            self.occurred_at = occurred_at
        if type is not None:
            self.type = type

    @property
    def context(self):
        """Gets the context of this WebhookSampleData.  # noqa: E501

        Extra metadata available for the notifications  # noqa: E501

        :return: The context of this WebhookSampleData.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this WebhookSampleData.

        Extra metadata available for the notifications  # noqa: E501

        :param context: The context of this WebhookSampleData.  # noqa: E501
        :type: dict(str, object)
        """

        self._context = context

    @property
    def description(self):
        """Gets the description of this WebhookSampleData.  # noqa: E501

        Description of the notifications  # noqa: E501

        :return: The description of this WebhookSampleData.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WebhookSampleData.

        Description of the notifications  # noqa: E501

        :param description: The description of this WebhookSampleData.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def occurred_at(self):
        """Gets the occurred_at of this WebhookSampleData.  # noqa: E501

        Timestamp for the event occurrence  # noqa: E501

        :return: The occurred_at of this WebhookSampleData.  # noqa: E501
        :rtype: datetime
        """
        return self._occurred_at

    @occurred_at.setter
    def occurred_at(self, occurred_at):
        """Sets the occurred_at of this WebhookSampleData.

        Timestamp for the event occurrence  # noqa: E501

        :param occurred_at: The occurred_at of this WebhookSampleData.  # noqa: E501
        :type: datetime
        """

        self._occurred_at = occurred_at

    @property
    def type(self):
        """Gets the type of this WebhookSampleData.  # noqa: E501

        Human readable type of notification  # noqa: E501

        :return: The type of this WebhookSampleData.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WebhookSampleData.

        Human readable type of notification  # noqa: E501

        :param type: The type of this WebhookSampleData.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebhookSampleData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookSampleData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WebhookSampleData):
            return True

        return self.to_dict() != other.to_dict()
