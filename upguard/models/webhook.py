# coding: utf-8

"""
    UpGuard CyberRisk API

    Access information from the CyberRisk platform programmatically using this API.  You can find or generate an API key to access this API in your CyberRisk Account Settings. Please authorize all requests by setting the \"Authorization\" header to your api key.  The base url for all public endpoints is https://cyber-risk.upguard.com/api/public  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from upguard.configuration import Configuration


class Webhook(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'id': 'str',
        'name': 'str',
        'notification_type_ids': 'list[str]',
        'url': 'str',
        'webhook_type': 'str'
    }

    attribute_map = {
        'enabled': 'enabled',
        'id': 'id',
        'name': 'name',
        'notification_type_ids': 'notification_type_ids',
        'url': 'url',
        'webhook_type': 'webhook_type'
    }

    def __init__(self, enabled=None, id=None, name=None, notification_type_ids=None, url=None, webhook_type=None, _configuration=None):  # noqa: E501
        """Webhook - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._enabled = None
        self._id = None
        self._name = None
        self._notification_type_ids = None
        self._url = None
        self._webhook_type = None
        self.discriminator = None

        if enabled is not None:
            self.enabled = enabled
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if notification_type_ids is not None:
            self.notification_type_ids = notification_type_ids
        if url is not None:
            self.url = url
        if webhook_type is not None:
            self.webhook_type = webhook_type

    @property
    def enabled(self):
        """Gets the enabled of this Webhook.  # noqa: E501

        Flag indicating whether the webhook is enabled or disabled  # noqa: E501

        :return: The enabled of this Webhook.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Webhook.

        Flag indicating whether the webhook is enabled or disabled  # noqa: E501

        :param enabled: The enabled of this Webhook.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this Webhook.  # noqa: E501

        The ID of the webhook  # noqa: E501

        :return: The id of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Webhook.

        The ID of the webhook  # noqa: E501

        :param id: The id of this Webhook.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Webhook.  # noqa: E501

        The name of the webhook  # noqa: E501

        :return: The name of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Webhook.

        The name of the webhook  # noqa: E501

        :param name: The name of this Webhook.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def notification_type_ids(self):
        """Gets the notification_type_ids of this Webhook.  # noqa: E501

        The list of notifications IDs registered for this webhook  # noqa: E501

        :return: The notification_type_ids of this Webhook.  # noqa: E501
        :rtype: list[str]
        """
        return self._notification_type_ids

    @notification_type_ids.setter
    def notification_type_ids(self, notification_type_ids):
        """Sets the notification_type_ids of this Webhook.

        The list of notifications IDs registered for this webhook  # noqa: E501

        :param notification_type_ids: The notification_type_ids of this Webhook.  # noqa: E501
        :type: list[str]
        """

        self._notification_type_ids = notification_type_ids

    @property
    def url(self):
        """Gets the url of this Webhook.  # noqa: E501

        The URL used by the webhook to send notifications to  # noqa: E501

        :return: The url of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Webhook.

        The URL used by the webhook to send notifications to  # noqa: E501

        :param url: The url of this Webhook.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def webhook_type(self):
        """Gets the webhook_type of this Webhook.  # noqa: E501

        The type of webhook  # noqa: E501

        :return: The webhook_type of this Webhook.  # noqa: E501
        :rtype: str
        """
        return self._webhook_type

    @webhook_type.setter
    def webhook_type(self, webhook_type):
        """Sets the webhook_type of this Webhook.

        The type of webhook  # noqa: E501

        :param webhook_type: The webhook_type of this Webhook.  # noqa: E501
        :type: str
        """
        allowed_values = ["zapier", "webhook"]  # noqa: E501
        if (self._configuration.client_side_validation and
                webhook_type not in allowed_values):
            raise ValueError(
                "Invalid value for `webhook_type` ({0}), must be one of {1}"  # noqa: E501
                .format(webhook_type, allowed_values)
            )

        self._webhook_type = webhook_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Webhook, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Webhook):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Webhook):
            return True

        return self.to_dict() != other.to_dict()
