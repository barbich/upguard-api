# coding: utf-8

"""
    UpGuard CyberRisk API

    Access information from the CyberRisk platform programmatically using this API.  You can find or generate an API key to access this API in your CyberRisk Account Settings. Please authorize all requests by setting the \"Authorization\" header to your api key.  The base url for all public endpoints is https://cyber-risk.upguard.com/api/public  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from upguard.configuration import Configuration


class ApiRange(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'as_name': 'str',
        'asn': 'int',
        'country': 'str',
        'end': 'str',
        'labels': 'list[str]',
        'num_ips': 'int',
        'owner': 'str',
        'sources': 'list[IPSource]',
        'start': 'str'
    }

    attribute_map = {
        'as_name': 'as_name',
        'asn': 'asn',
        'country': 'country',
        'end': 'end',
        'labels': 'labels',
        'num_ips': 'num_ips',
        'owner': 'owner',
        'sources': 'sources',
        'start': 'start'
    }

    def __init__(self, as_name=None, asn=None, country=None, end=None, labels=None, num_ips=None, owner=None, sources=None, start=None, _configuration=None):  # noqa: E501
        """ApiRange - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._as_name = None
        self._asn = None
        self._country = None
        self._end = None
        self._labels = None
        self._num_ips = None
        self._owner = None
        self._sources = None
        self._start = None
        self.discriminator = None

        if as_name is not None:
            self.as_name = as_name
        if asn is not None:
            self.asn = asn
        if country is not None:
            self.country = country
        if end is not None:
            self.end = end
        if labels is not None:
            self.labels = labels
        if num_ips is not None:
            self.num_ips = num_ips
        if owner is not None:
            self.owner = owner
        if sources is not None:
            self.sources = sources
        if start is not None:
            self.start = start

    @property
    def as_name(self):
        """Gets the as_name of this ApiRange.  # noqa: E501

        The name of the AS the range belongs to. If no AS is available for a range this field will be omitted.  # noqa: E501

        :return: The as_name of this ApiRange.  # noqa: E501
        :rtype: str
        """
        return self._as_name

    @as_name.setter
    def as_name(self, as_name):
        """Sets the as_name of this ApiRange.

        The name of the AS the range belongs to. If no AS is available for a range this field will be omitted.  # noqa: E501

        :param as_name: The as_name of this ApiRange.  # noqa: E501
        :type: str
        """

        self._as_name = as_name

    @property
    def asn(self):
        """Gets the asn of this ApiRange.  # noqa: E501

        The ASN the range belongs to. If no ASN is available for a range this field will be omitted.  # noqa: E501

        :return: The asn of this ApiRange.  # noqa: E501
        :rtype: int
        """
        return self._asn

    @asn.setter
    def asn(self, asn):
        """Sets the asn of this ApiRange.

        The ASN the range belongs to. If no ASN is available for a range this field will be omitted.  # noqa: E501

        :param asn: The asn of this ApiRange.  # noqa: E501
        :type: int
        """

        self._asn = asn

    @property
    def country(self):
        """Gets the country of this ApiRange.  # noqa: E501

        The country the range belongs to. If no country is available for a range this field will be omitted.  # noqa: E501

        :return: The country of this ApiRange.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ApiRange.

        The country the range belongs to. If no country is available for a range this field will be omitted.  # noqa: E501

        :param country: The country of this ApiRange.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def end(self):
        """Gets the end of this ApiRange.  # noqa: E501

        The range end.  # noqa: E501

        :return: The end of this ApiRange.  # noqa: E501
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this ApiRange.

        The range end.  # noqa: E501

        :param end: The end of this ApiRange.  # noqa: E501
        :type: str
        """

        self._end = end

    @property
    def labels(self):
        """Gets the labels of this ApiRange.  # noqa: E501

        The labels associated with the range.  # noqa: E501

        :return: The labels of this ApiRange.  # noqa: E501
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ApiRange.

        The labels associated with the range.  # noqa: E501

        :param labels: The labels of this ApiRange.  # noqa: E501
        :type: list[str]
        """

        self._labels = labels

    @property
    def num_ips(self):
        """Gets the num_ips of this ApiRange.  # noqa: E501

        The number of IPs in this range  # noqa: E501

        :return: The num_ips of this ApiRange.  # noqa: E501
        :rtype: int
        """
        return self._num_ips

    @num_ips.setter
    def num_ips(self, num_ips):
        """Sets the num_ips of this ApiRange.

        The number of IPs in this range  # noqa: E501

        :param num_ips: The num_ips of this ApiRange.  # noqa: E501
        :type: int
        """

        self._num_ips = num_ips

    @property
    def owner(self):
        """Gets the owner of this ApiRange.  # noqa: E501

        The owner of the range.  # noqa: E501

        :return: The owner of this ApiRange.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ApiRange.

        The owner of the range.  # noqa: E501

        :param owner: The owner of this ApiRange.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def sources(self):
        """Gets the sources of this ApiRange.  # noqa: E501

        The sources of the range.  # noqa: E501

        :return: The sources of this ApiRange.  # noqa: E501
        :rtype: list[IPSource]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this ApiRange.

        The sources of the range.  # noqa: E501

        :param sources: The sources of this ApiRange.  # noqa: E501
        :type: list[IPSource]
        """

        self._sources = sources

    @property
    def start(self):
        """Gets the start of this ApiRange.  # noqa: E501

        The range start.  # noqa: E501

        :return: The start of this ApiRange.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this ApiRange.

        The range start.  # noqa: E501

        :param start: The start of this ApiRange.  # noqa: E501
        :type: str
        """

        self._start = start

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiRange, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiRange):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiRange):
            return True

        return self.to_dict() != other.to_dict()
