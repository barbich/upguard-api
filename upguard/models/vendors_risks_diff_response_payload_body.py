# coding: utf-8

"""
    UpGuard CyberRisk API

    Access information from the CyberRisk platform programmatically using this API.  You can find or generate an API key to access this API in your CyberRisk Account Settings. Please authorize all requests by setting the \"Authorization\" header to your api key.  The base url for all public endpoints is https://cyber-risk.upguard.com/api/public  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from upguard.configuration import Configuration


class VendorsRisksDiffResponsePayloadBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'next_page_token': 'str',
        'total_results': 'int',
        'vendors': 'list[VendorsRiskDiffs]'
    }

    attribute_map = {
        'next_page_token': 'next_page_token',
        'total_results': 'total_results',
        'vendors': 'vendors'
    }

    def __init__(self, next_page_token=None, total_results=None, vendors=None, _configuration=None):  # noqa: E501
        """VendorsRisksDiffResponsePayloadBody - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._next_page_token = None
        self._total_results = None
        self._vendors = None
        self.discriminator = None

        if next_page_token is not None:
            self.next_page_token = next_page_token
        if total_results is not None:
            self.total_results = total_results
        if vendors is not None:
            self.vendors = vendors

    @property
    def next_page_token(self):
        """Gets the next_page_token of this VendorsRisksDiffResponsePayloadBody.  # noqa: E501

        The token to be used to retrieve the next page of results. Will not be returned if there are no more results.  # noqa: E501

        :return: The next_page_token of this VendorsRisksDiffResponsePayloadBody.  # noqa: E501
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this VendorsRisksDiffResponsePayloadBody.

        The token to be used to retrieve the next page of results. Will not be returned if there are no more results.  # noqa: E501

        :param next_page_token: The next_page_token of this VendorsRisksDiffResponsePayloadBody.  # noqa: E501
        :type: str
        """

        self._next_page_token = next_page_token

    @property
    def total_results(self):
        """Gets the total_results of this VendorsRisksDiffResponsePayloadBody.  # noqa: E501

        The total number of vendors found.  # noqa: E501

        :return: The total_results of this VendorsRisksDiffResponsePayloadBody.  # noqa: E501
        :rtype: int
        """
        return self._total_results

    @total_results.setter
    def total_results(self, total_results):
        """Sets the total_results of this VendorsRisksDiffResponsePayloadBody.

        The total number of vendors found.  # noqa: E501

        :param total_results: The total_results of this VendorsRisksDiffResponsePayloadBody.  # noqa: E501
        :type: int
        """

        self._total_results = total_results

    @property
    def vendors(self):
        """Gets the vendors of this VendorsRisksDiffResponsePayloadBody.  # noqa: E501

        The list of vendors found  # noqa: E501

        :return: The vendors of this VendorsRisksDiffResponsePayloadBody.  # noqa: E501
        :rtype: list[VendorsRiskDiffs]
        """
        return self._vendors

    @vendors.setter
    def vendors(self, vendors):
        """Sets the vendors of this VendorsRisksDiffResponsePayloadBody.

        The list of vendors found  # noqa: E501

        :param vendors: The vendors of this VendorsRisksDiffResponsePayloadBody.  # noqa: E501
        :type: list[VendorsRiskDiffs]
        """

        self._vendors = vendors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VendorsRisksDiffResponsePayloadBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VendorsRisksDiffResponsePayloadBody):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VendorsRisksDiffResponsePayloadBody):
            return True

        return self.to_dict() != other.to_dict()
