# coding: utf-8

"""
    UpGuard CyberRisk API

    Access information from the CyberRisk platform programmatically using this API.  You can find or generate an API key to access this API in your CyberRisk Account Settings. Please authorize all requests by setting the \"Authorization\" header to your api key.  The base url for all public endpoints is https://cyber-risk.upguard.com/api/public  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from upguard.configuration import Configuration


class Risk(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category': 'str',
        'description': 'str',
        'finding': 'str',
        'first_detected': 'datetime',
        'hostnames': 'list[str]',
        'id': 'str',
        'risk': 'str',
        'risk_subtype': 'str',
        'risk_type': 'str',
        'risk_waivers': 'list[RiskWaiver]',
        'severity': 'str'
    }

    attribute_map = {
        'category': 'category',
        'description': 'description',
        'finding': 'finding',
        'first_detected': 'firstDetected',
        'hostnames': 'hostnames',
        'id': 'id',
        'risk': 'risk',
        'risk_subtype': 'riskSubtype',
        'risk_type': 'riskType',
        'risk_waivers': 'risk_waivers',
        'severity': 'severity'
    }

    def __init__(self, category=None, description=None, finding=None, first_detected=None, hostnames=None, id=None, risk=None, risk_subtype=None, risk_type=None, risk_waivers=None, severity=None, _configuration=None):  # noqa: E501
        """Risk - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._category = None
        self._description = None
        self._finding = None
        self._first_detected = None
        self._hostnames = None
        self._id = None
        self._risk = None
        self._risk_subtype = None
        self._risk_type = None
        self._risk_waivers = None
        self._severity = None
        self.discriminator = None

        if category is not None:
            self.category = category
        if description is not None:
            self.description = description
        if finding is not None:
            self.finding = finding
        if first_detected is not None:
            self.first_detected = first_detected
        if hostnames is not None:
            self.hostnames = hostnames
        if id is not None:
            self.id = id
        if risk is not None:
            self.risk = risk
        if risk_subtype is not None:
            self.risk_subtype = risk_subtype
        if risk_type is not None:
            self.risk_type = risk_type
        if risk_waivers is not None:
            self.risk_waivers = risk_waivers
        if severity is not None:
            self.severity = severity

    @property
    def category(self):
        """Gets the category of this Risk.  # noqa: E501

        The risk category identifier  # noqa: E501

        :return: The category of this Risk.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Risk.

        The risk category identifier  # noqa: E501

        :param category: The category of this Risk.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this Risk.  # noqa: E501

        A long description of the risk  # noqa: E501

        :return: The description of this Risk.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Risk.

        A long description of the risk  # noqa: E501

        :param description: The description of this Risk.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def finding(self):
        """Gets the finding of this Risk.  # noqa: E501

        A short description of the finding  # noqa: E501

        :return: The finding of this Risk.  # noqa: E501
        :rtype: str
        """
        return self._finding

    @finding.setter
    def finding(self, finding):
        """Sets the finding of this Risk.

        A short description of the finding  # noqa: E501

        :param finding: The finding of this Risk.  # noqa: E501
        :type: str
        """

        self._finding = finding

    @property
    def first_detected(self):
        """Gets the first_detected of this Risk.  # noqa: E501

        When the risk was first detected  # noqa: E501

        :return: The first_detected of this Risk.  # noqa: E501
        :rtype: datetime
        """
        return self._first_detected

    @first_detected.setter
    def first_detected(self, first_detected):
        """Sets the first_detected of this Risk.

        When the risk was first detected  # noqa: E501

        :param first_detected: The first_detected of this Risk.  # noqa: E501
        :type: datetime
        """

        self._first_detected = first_detected

    @property
    def hostnames(self):
        """Gets the hostnames of this Risk.  # noqa: E501

        The hostnames where the risk was detected  # noqa: E501

        :return: The hostnames of this Risk.  # noqa: E501
        :rtype: list[str]
        """
        return self._hostnames

    @hostnames.setter
    def hostnames(self, hostnames):
        """Sets the hostnames of this Risk.

        The hostnames where the risk was detected  # noqa: E501

        :param hostnames: The hostnames of this Risk.  # noqa: E501
        :type: list[str]
        """

        self._hostnames = hostnames

    @property
    def id(self):
        """Gets the id of this Risk.  # noqa: E501

        The risk identifier  # noqa: E501

        :return: The id of this Risk.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Risk.

        The risk identifier  # noqa: E501

        :param id: The id of this Risk.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def risk(self):
        """Gets the risk of this Risk.  # noqa: E501

        A short description of the risk  # noqa: E501

        :return: The risk of this Risk.  # noqa: E501
        :rtype: str
        """
        return self._risk

    @risk.setter
    def risk(self, risk):
        """Sets the risk of this Risk.

        A short description of the risk  # noqa: E501

        :param risk: The risk of this Risk.  # noqa: E501
        :type: str
        """

        self._risk = risk

    @property
    def risk_subtype(self):
        """Gets the risk_subtype of this Risk.  # noqa: E501

        The subtype of the risk, e.g. the subtype of the verified_vuln:CVE-2021-34473 is CVE-2021-34473. This field will be empty if the risk has no subtype, e.g. for wp_version_exposed, or for generic risks like verified_vuln:* where the subtype is only determined when the full risk is specified.  # noqa: E501

        :return: The risk_subtype of this Risk.  # noqa: E501
        :rtype: str
        """
        return self._risk_subtype

    @risk_subtype.setter
    def risk_subtype(self, risk_subtype):
        """Sets the risk_subtype of this Risk.

        The subtype of the risk, e.g. the subtype of the verified_vuln:CVE-2021-34473 is CVE-2021-34473. This field will be empty if the risk has no subtype, e.g. for wp_version_exposed, or for generic risks like verified_vuln:* where the subtype is only determined when the full risk is specified.  # noqa: E501

        :param risk_subtype: The risk_subtype of this Risk.  # noqa: E501
        :type: str
        """

        self._risk_subtype = risk_subtype

    @property
    def risk_type(self):
        """Gets the risk_type of this Risk.  # noqa: E501

        The type of the risk, e.g. the type of the verified_vuln:CVE-2021-34473 is verified_vuln  # noqa: E501

        :return: The risk_type of this Risk.  # noqa: E501
        :rtype: str
        """
        return self._risk_type

    @risk_type.setter
    def risk_type(self, risk_type):
        """Sets the risk_type of this Risk.

        The type of the risk, e.g. the type of the verified_vuln:CVE-2021-34473 is verified_vuln  # noqa: E501

        :param risk_type: The risk_type of this Risk.  # noqa: E501
        :type: str
        """

        self._risk_type = risk_type

    @property
    def risk_waivers(self):
        """Gets the risk_waivers of this Risk.  # noqa: E501

        List of risk waivers applicable to this risk  # noqa: E501

        :return: The risk_waivers of this Risk.  # noqa: E501
        :rtype: list[RiskWaiver]
        """
        return self._risk_waivers

    @risk_waivers.setter
    def risk_waivers(self, risk_waivers):
        """Sets the risk_waivers of this Risk.

        List of risk waivers applicable to this risk  # noqa: E501

        :param risk_waivers: The risk_waivers of this Risk.  # noqa: E501
        :type: list[RiskWaiver]
        """

        self._risk_waivers = risk_waivers

    @property
    def severity(self):
        """Gets the severity of this Risk.  # noqa: E501

        The risk severity  # noqa: E501

        :return: The severity of this Risk.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Risk.

        The risk severity  # noqa: E501

        :param severity: The severity of this Risk.  # noqa: E501
        :type: str
        """

        self._severity = severity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Risk, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Risk):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Risk):
            return True

        return self.to_dict() != other.to_dict()
