# coding: utf-8

"""
    UpGuard CyberRisk API

    Access information from the CyberRisk platform programmatically using this API.  You can find or generate an API key to access this API in your CyberRisk Account Settings. Please authorize all requests by setting the \"Authorization\" header to your api key.  The base url for all public endpoints is https://cyber-risk.upguard.com/api/public  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from upguard.configuration import Configuration


class GetTyposquatDetailsResponsePayloadBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ignored': 'list[TyposquatPermutationDetail]',
        'registered': 'list[TyposquatPermutationDetail]',
        'unregistered': 'list[TyposquatPermutationDetail]'
    }

    attribute_map = {
        'ignored': 'ignored',
        'registered': 'registered',
        'unregistered': 'unregistered'
    }

    def __init__(self, ignored=None, registered=None, unregistered=None, _configuration=None):  # noqa: E501
        """GetTyposquatDetailsResponsePayloadBody - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ignored = None
        self._registered = None
        self._unregistered = None
        self.discriminator = None

        if ignored is not None:
            self.ignored = ignored
        if registered is not None:
            self.registered = registered
        if unregistered is not None:
            self.unregistered = unregistered

    @property
    def ignored(self):
        """Gets the ignored of this GetTyposquatDetailsResponsePayloadBody.  # noqa: E501

        The list of ignored permutations  # noqa: E501

        :return: The ignored of this GetTyposquatDetailsResponsePayloadBody.  # noqa: E501
        :rtype: list[TyposquatPermutationDetail]
        """
        return self._ignored

    @ignored.setter
    def ignored(self, ignored):
        """Sets the ignored of this GetTyposquatDetailsResponsePayloadBody.

        The list of ignored permutations  # noqa: E501

        :param ignored: The ignored of this GetTyposquatDetailsResponsePayloadBody.  # noqa: E501
        :type: list[TyposquatPermutationDetail]
        """

        self._ignored = ignored

    @property
    def registered(self):
        """Gets the registered of this GetTyposquatDetailsResponsePayloadBody.  # noqa: E501

        The list of registered permutations  # noqa: E501

        :return: The registered of this GetTyposquatDetailsResponsePayloadBody.  # noqa: E501
        :rtype: list[TyposquatPermutationDetail]
        """
        return self._registered

    @registered.setter
    def registered(self, registered):
        """Sets the registered of this GetTyposquatDetailsResponsePayloadBody.

        The list of registered permutations  # noqa: E501

        :param registered: The registered of this GetTyposquatDetailsResponsePayloadBody.  # noqa: E501
        :type: list[TyposquatPermutationDetail]
        """

        self._registered = registered

    @property
    def unregistered(self):
        """Gets the unregistered of this GetTyposquatDetailsResponsePayloadBody.  # noqa: E501

        The list of unregistered permutations  # noqa: E501

        :return: The unregistered of this GetTyposquatDetailsResponsePayloadBody.  # noqa: E501
        :rtype: list[TyposquatPermutationDetail]
        """
        return self._unregistered

    @unregistered.setter
    def unregistered(self, unregistered):
        """Sets the unregistered of this GetTyposquatDetailsResponsePayloadBody.

        The list of unregistered permutations  # noqa: E501

        :param unregistered: The unregistered of this GetTyposquatDetailsResponsePayloadBody.  # noqa: E501
        :type: list[TyposquatPermutationDetail]
        """

        self._unregistered = unregistered

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetTyposquatDetailsResponsePayloadBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetTyposquatDetailsResponsePayloadBody):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetTyposquatDetailsResponsePayloadBody):
            return True

        return self.to_dict() != other.to_dict()
