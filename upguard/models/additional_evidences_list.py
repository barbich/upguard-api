# coding: utf-8

"""
    UpGuard CyberRisk API

    Access information from the CyberRisk platform programmatically using this API.  You can find or generate an API key to access this API in your CyberRisk Account Settings. Please authorize all requests by setting the \"Authorization\" header to your api key.  The base url for all public endpoints is https://cyber-risk.upguard.com/api/public  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from upguard.configuration import Configuration


class AdditionalEvidencesList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'commentary': 'str',
        'document_type': 'str',
        'file_name': 'str',
        'id': 'int',
        'name': 'str',
        'uploaded_at': 'datetime'
    }

    attribute_map = {
        'commentary': 'commentary',
        'document_type': 'document_type',
        'file_name': 'file_name',
        'id': 'id',
        'name': 'name',
        'uploaded_at': 'uploaded_at'
    }

    def __init__(self, commentary=None, document_type=None, file_name=None, id=None, name=None, uploaded_at=None, _configuration=None):  # noqa: E501
        """AdditionalEvidencesList - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._commentary = None
        self._document_type = None
        self._file_name = None
        self._id = None
        self._name = None
        self._uploaded_at = None
        self.discriminator = None

        if commentary is not None:
            self.commentary = commentary
        if document_type is not None:
            self.document_type = document_type
        if file_name is not None:
            self.file_name = file_name
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if uploaded_at is not None:
            self.uploaded_at = uploaded_at

    @property
    def commentary(self):
        """Gets the commentary of this AdditionalEvidencesList.  # noqa: E501

        The commentary supplied to describe the context and relevance of the evidence  # noqa: E501

        :return: The commentary of this AdditionalEvidencesList.  # noqa: E501
        :rtype: str
        """
        return self._commentary

    @commentary.setter
    def commentary(self, commentary):
        """Sets the commentary of this AdditionalEvidencesList.

        The commentary supplied to describe the context and relevance of the evidence  # noqa: E501

        :param commentary: The commentary of this AdditionalEvidencesList.  # noqa: E501
        :type: str
        """

        self._commentary = commentary

    @property
    def document_type(self):
        """Gets the document_type of this AdditionalEvidencesList.  # noqa: E501

        The evidence document type  # noqa: E501

        :return: The document_type of this AdditionalEvidencesList.  # noqa: E501
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this AdditionalEvidencesList.

        The evidence document type  # noqa: E501

        :param document_type: The document_type of this AdditionalEvidencesList.  # noqa: E501
        :type: str
        """

        self._document_type = document_type

    @property
    def file_name(self):
        """Gets the file_name of this AdditionalEvidencesList.  # noqa: E501

        The file name of the latest uploaded document (version) for this evidence  # noqa: E501

        :return: The file_name of this AdditionalEvidencesList.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this AdditionalEvidencesList.

        The file name of the latest uploaded document (version) for this evidence  # noqa: E501

        :param file_name: The file_name of this AdditionalEvidencesList.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def id(self):
        """Gets the id of this AdditionalEvidencesList.  # noqa: E501

        The additional evidence ID.  # noqa: E501

        :return: The id of this AdditionalEvidencesList.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AdditionalEvidencesList.

        The additional evidence ID.  # noqa: E501

        :param id: The id of this AdditionalEvidencesList.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AdditionalEvidencesList.  # noqa: E501

        The name given to the additional evidence  # noqa: E501

        :return: The name of this AdditionalEvidencesList.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AdditionalEvidencesList.

        The name given to the additional evidence  # noqa: E501

        :param name: The name of this AdditionalEvidencesList.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def uploaded_at(self):
        """Gets the uploaded_at of this AdditionalEvidencesList.  # noqa: E501

        When the latest document for this evidence was uploaded.  # noqa: E501

        :return: The uploaded_at of this AdditionalEvidencesList.  # noqa: E501
        :rtype: datetime
        """
        return self._uploaded_at

    @uploaded_at.setter
    def uploaded_at(self, uploaded_at):
        """Sets the uploaded_at of this AdditionalEvidencesList.

        When the latest document for this evidence was uploaded.  # noqa: E501

        :param uploaded_at: The uploaded_at of this AdditionalEvidencesList.  # noqa: E501
        :type: datetime
        """

        self._uploaded_at = uploaded_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdditionalEvidencesList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdditionalEvidencesList):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdditionalEvidencesList):
            return True

        return self.to_dict() != other.to_dict()
