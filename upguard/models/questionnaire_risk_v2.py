# coding: utf-8

"""
    UpGuard CyberRisk API

    Access information from the CyberRisk platform programmatically using this API.  You can find or generate an API key to access this API in your CyberRisk Account Settings. Please authorize all requests by setting the \"Authorization\" header to your api key.  The base url for all public endpoints is https://cyber-risk.upguard.com/api/public  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from upguard.configuration import Configuration


class QuestionnaireRiskV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'controls': 'StringSlice',
        'created_at': 'datetime',
        'in_remediation': 'bool',
        'is_shared_questionnaire': 'bool',
        'questionnaire_id': 'int',
        'risk_category': 'str',
        'risk_explanation': 'str',
        'risk_id': 'str',
        'risk_name': 'str',
        'risk_severity': 'str',
        'risk_text': 'str',
        'risk_waivers': 'list[QuestionnaireRiskWaiver]',
        'risk_why': 'str',
        'vendor_id': 'int'
    }

    attribute_map = {
        'controls': 'controls',
        'created_at': 'createdAt',
        'in_remediation': 'inRemediation',
        'is_shared_questionnaire': 'isSharedQuestionnaire',
        'questionnaire_id': 'questionnaireId',
        'risk_category': 'riskCategory',
        'risk_explanation': 'riskExplanation',
        'risk_id': 'riskId',
        'risk_name': 'riskName',
        'risk_severity': 'riskSeverity',
        'risk_text': 'riskText',
        'risk_waivers': 'riskWaivers',
        'risk_why': 'riskWhy',
        'vendor_id': 'vendorId'
    }

    def __init__(self, controls=None, created_at=None, in_remediation=None, is_shared_questionnaire=None, questionnaire_id=None, risk_category=None, risk_explanation=None, risk_id=None, risk_name=None, risk_severity=None, risk_text=None, risk_waivers=None, risk_why=None, vendor_id=None, _configuration=None):  # noqa: E501
        """QuestionnaireRiskV2 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._controls = None
        self._created_at = None
        self._in_remediation = None
        self._is_shared_questionnaire = None
        self._questionnaire_id = None
        self._risk_category = None
        self._risk_explanation = None
        self._risk_id = None
        self._risk_name = None
        self._risk_severity = None
        self._risk_text = None
        self._risk_waivers = None
        self._risk_why = None
        self._vendor_id = None
        self.discriminator = None

        if controls is not None:
            self.controls = controls
        if created_at is not None:
            self.created_at = created_at
        if in_remediation is not None:
            self.in_remediation = in_remediation
        if is_shared_questionnaire is not None:
            self.is_shared_questionnaire = is_shared_questionnaire
        if questionnaire_id is not None:
            self.questionnaire_id = questionnaire_id
        if risk_category is not None:
            self.risk_category = risk_category
        if risk_explanation is not None:
            self.risk_explanation = risk_explanation
        if risk_id is not None:
            self.risk_id = risk_id
        if risk_name is not None:
            self.risk_name = risk_name
        if risk_severity is not None:
            self.risk_severity = risk_severity
        if risk_text is not None:
            self.risk_text = risk_text
        if risk_waivers is not None:
            self.risk_waivers = risk_waivers
        if risk_why is not None:
            self.risk_why = risk_why
        if vendor_id is not None:
            self.vendor_id = vendor_id

    @property
    def controls(self):
        """Gets the controls of this QuestionnaireRiskV2.  # noqa: E501


        :return: The controls of this QuestionnaireRiskV2.  # noqa: E501
        :rtype: StringSlice
        """
        return self._controls

    @controls.setter
    def controls(self, controls):
        """Sets the controls of this QuestionnaireRiskV2.


        :param controls: The controls of this QuestionnaireRiskV2.  # noqa: E501
        :type: StringSlice
        """

        self._controls = controls

    @property
    def created_at(self):
        """Gets the created_at of this QuestionnaireRiskV2.  # noqa: E501

        The time the risk was first seen  # noqa: E501

        :return: The created_at of this QuestionnaireRiskV2.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this QuestionnaireRiskV2.

        The time the risk was first seen  # noqa: E501

        :param created_at: The created_at of this QuestionnaireRiskV2.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def in_remediation(self):
        """Gets the in_remediation of this QuestionnaireRiskV2.  # noqa: E501

        Flag indicating whether the risk is in remediation  # noqa: E501

        :return: The in_remediation of this QuestionnaireRiskV2.  # noqa: E501
        :rtype: bool
        """
        return self._in_remediation

    @in_remediation.setter
    def in_remediation(self, in_remediation):
        """Sets the in_remediation of this QuestionnaireRiskV2.

        Flag indicating whether the risk is in remediation  # noqa: E501

        :param in_remediation: The in_remediation of this QuestionnaireRiskV2.  # noqa: E501
        :type: bool
        """

        self._in_remediation = in_remediation

    @property
    def is_shared_questionnaire(self):
        """Gets the is_shared_questionnaire of this QuestionnaireRiskV2.  # noqa: E501

        Flag indicating whether the risk arise from a shared questionnaire. This field will be present  # noqa: E501

        :return: The is_shared_questionnaire of this QuestionnaireRiskV2.  # noqa: E501
        :rtype: bool
        """
        return self._is_shared_questionnaire

    @is_shared_questionnaire.setter
    def is_shared_questionnaire(self, is_shared_questionnaire):
        """Sets the is_shared_questionnaire of this QuestionnaireRiskV2.

        Flag indicating whether the risk arise from a shared questionnaire. This field will be present  # noqa: E501

        :param is_shared_questionnaire: The is_shared_questionnaire of this QuestionnaireRiskV2.  # noqa: E501
        :type: bool
        """

        self._is_shared_questionnaire = is_shared_questionnaire

    @property
    def questionnaire_id(self):
        """Gets the questionnaire_id of this QuestionnaireRiskV2.  # noqa: E501

        The ID of the questionnaire this risk belongs to  # noqa: E501

        :return: The questionnaire_id of this QuestionnaireRiskV2.  # noqa: E501
        :rtype: int
        """
        return self._questionnaire_id

    @questionnaire_id.setter
    def questionnaire_id(self, questionnaire_id):
        """Sets the questionnaire_id of this QuestionnaireRiskV2.

        The ID of the questionnaire this risk belongs to  # noqa: E501

        :param questionnaire_id: The questionnaire_id of this QuestionnaireRiskV2.  # noqa: E501
        :type: int
        """

        self._questionnaire_id = questionnaire_id

    @property
    def risk_category(self):
        """Gets the risk_category of this QuestionnaireRiskV2.  # noqa: E501

        The category of the risk  # noqa: E501

        :return: The risk_category of this QuestionnaireRiskV2.  # noqa: E501
        :rtype: str
        """
        return self._risk_category

    @risk_category.setter
    def risk_category(self, risk_category):
        """Sets the risk_category of this QuestionnaireRiskV2.

        The category of the risk  # noqa: E501

        :param risk_category: The risk_category of this QuestionnaireRiskV2.  # noqa: E501
        :type: str
        """

        self._risk_category = risk_category

    @property
    def risk_explanation(self):
        """Gets the risk_explanation of this QuestionnaireRiskV2.  # noqa: E501


        :return: The risk_explanation of this QuestionnaireRiskV2.  # noqa: E501
        :rtype: str
        """
        return self._risk_explanation

    @risk_explanation.setter
    def risk_explanation(self, risk_explanation):
        """Sets the risk_explanation of this QuestionnaireRiskV2.


        :param risk_explanation: The risk_explanation of this QuestionnaireRiskV2.  # noqa: E501
        :type: str
        """

        self._risk_explanation = risk_explanation

    @property
    def risk_id(self):
        """Gets the risk_id of this QuestionnaireRiskV2.  # noqa: E501

        THe ID of the risk  # noqa: E501

        :return: The risk_id of this QuestionnaireRiskV2.  # noqa: E501
        :rtype: str
        """
        return self._risk_id

    @risk_id.setter
    def risk_id(self, risk_id):
        """Sets the risk_id of this QuestionnaireRiskV2.

        THe ID of the risk  # noqa: E501

        :param risk_id: The risk_id of this QuestionnaireRiskV2.  # noqa: E501
        :type: str
        """

        self._risk_id = risk_id

    @property
    def risk_name(self):
        """Gets the risk_name of this QuestionnaireRiskV2.  # noqa: E501

        The name of the risk  # noqa: E501

        :return: The risk_name of this QuestionnaireRiskV2.  # noqa: E501
        :rtype: str
        """
        return self._risk_name

    @risk_name.setter
    def risk_name(self, risk_name):
        """Sets the risk_name of this QuestionnaireRiskV2.

        The name of the risk  # noqa: E501

        :param risk_name: The risk_name of this QuestionnaireRiskV2.  # noqa: E501
        :type: str
        """

        self._risk_name = risk_name

    @property
    def risk_severity(self):
        """Gets the risk_severity of this QuestionnaireRiskV2.  # noqa: E501

        The severity of the risk  # noqa: E501

        :return: The risk_severity of this QuestionnaireRiskV2.  # noqa: E501
        :rtype: str
        """
        return self._risk_severity

    @risk_severity.setter
    def risk_severity(self, risk_severity):
        """Sets the risk_severity of this QuestionnaireRiskV2.

        The severity of the risk  # noqa: E501

        :param risk_severity: The risk_severity of this QuestionnaireRiskV2.  # noqa: E501
        :type: str
        """
        allowed_values = ["pass", "info", "low", "medium", "high", "critical"]  # noqa: E501
        if (self._configuration.client_side_validation and
                risk_severity not in allowed_values):
            raise ValueError(
                "Invalid value for `risk_severity` ({0}), must be one of {1}"  # noqa: E501
                .format(risk_severity, allowed_values)
            )

        self._risk_severity = risk_severity

    @property
    def risk_text(self):
        """Gets the risk_text of this QuestionnaireRiskV2.  # noqa: E501

        The description of the risk  # noqa: E501

        :return: The risk_text of this QuestionnaireRiskV2.  # noqa: E501
        :rtype: str
        """
        return self._risk_text

    @risk_text.setter
    def risk_text(self, risk_text):
        """Sets the risk_text of this QuestionnaireRiskV2.

        The description of the risk  # noqa: E501

        :param risk_text: The risk_text of this QuestionnaireRiskV2.  # noqa: E501
        :type: str
        """

        self._risk_text = risk_text

    @property
    def risk_waivers(self):
        """Gets the risk_waivers of this QuestionnaireRiskV2.  # noqa: E501

        List of risk waivers associated with the risk  # noqa: E501

        :return: The risk_waivers of this QuestionnaireRiskV2.  # noqa: E501
        :rtype: list[QuestionnaireRiskWaiver]
        """
        return self._risk_waivers

    @risk_waivers.setter
    def risk_waivers(self, risk_waivers):
        """Sets the risk_waivers of this QuestionnaireRiskV2.

        List of risk waivers associated with the risk  # noqa: E501

        :param risk_waivers: The risk_waivers of this QuestionnaireRiskV2.  # noqa: E501
        :type: list[QuestionnaireRiskWaiver]
        """

        self._risk_waivers = risk_waivers

    @property
    def risk_why(self):
        """Gets the risk_why of this QuestionnaireRiskV2.  # noqa: E501


        :return: The risk_why of this QuestionnaireRiskV2.  # noqa: E501
        :rtype: str
        """
        return self._risk_why

    @risk_why.setter
    def risk_why(self, risk_why):
        """Sets the risk_why of this QuestionnaireRiskV2.


        :param risk_why: The risk_why of this QuestionnaireRiskV2.  # noqa: E501
        :type: str
        """

        self._risk_why = risk_why

    @property
    def vendor_id(self):
        """Gets the vendor_id of this QuestionnaireRiskV2.  # noqa: E501

        The ID of the vendor this risk belongs to  # noqa: E501

        :return: The vendor_id of this QuestionnaireRiskV2.  # noqa: E501
        :rtype: int
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """Sets the vendor_id of this QuestionnaireRiskV2.

        The ID of the vendor this risk belongs to  # noqa: E501

        :param vendor_id: The vendor_id of this QuestionnaireRiskV2.  # noqa: E501
        :type: int
        """

        self._vendor_id = vendor_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuestionnaireRiskV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuestionnaireRiskV2):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QuestionnaireRiskV2):
            return True

        return self.to_dict() != other.to_dict()
