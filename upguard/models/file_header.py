# coding: utf-8

"""
    UpGuard CyberRisk API

    Access information from the CyberRisk platform programmatically using this API.  You can find or generate an API key to access this API in your CyberRisk Account Settings. Please authorize all requests by setting the \"Authorization\" header to your api key.  The base url for all public endpoints is https://cyber-risk.upguard.com/api/public  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from upguard.configuration import Configuration


class FileHeader(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filename': 'str',
        'header': 'MIMEHeader',
        'size': 'int'
    }

    attribute_map = {
        'filename': 'Filename',
        'header': 'Header',
        'size': 'Size'
    }

    def __init__(self, filename=None, header=None, size=None, _configuration=None):  # noqa: E501
        """FileHeader - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._filename = None
        self._header = None
        self._size = None
        self.discriminator = None

        if filename is not None:
            self.filename = filename
        if header is not None:
            self.header = header
        if size is not None:
            self.size = size

    @property
    def filename(self):
        """Gets the filename of this FileHeader.  # noqa: E501


        :return: The filename of this FileHeader.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this FileHeader.


        :param filename: The filename of this FileHeader.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def header(self):
        """Gets the header of this FileHeader.  # noqa: E501


        :return: The header of this FileHeader.  # noqa: E501
        :rtype: MIMEHeader
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this FileHeader.


        :param header: The header of this FileHeader.  # noqa: E501
        :type: MIMEHeader
        """

        self._header = header

    @property
    def size(self):
        """Gets the size of this FileHeader.  # noqa: E501


        :return: The size of this FileHeader.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this FileHeader.


        :param size: The size of this FileHeader.  # noqa: E501
        :type: int
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileHeader, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileHeader):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileHeader):
            return True

        return self.to_dict() != other.to_dict()
