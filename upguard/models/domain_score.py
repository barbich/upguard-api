# coding: utf-8

"""
    UpGuard CyberRisk API

    Access information from the CyberRisk platform programmatically using this API.  You can find or generate an API key to access this API in your CyberRisk Account Settings. Please authorize all requests by setting the \"Authorization\" header to your api key.  The base url for all public endpoints is https://cyber-risk.upguard.com/api/public  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from upguard.configuration import Configuration


class DomainScore(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'automated_score': 'int',
        'hostname': 'str'
    }

    attribute_map = {
        'automated_score': 'automated_score',
        'hostname': 'hostname'
    }

    def __init__(self, automated_score=None, hostname=None, _configuration=None):  # noqa: E501
        """DomainScore - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._automated_score = None
        self._hostname = None
        self.discriminator = None

        if automated_score is not None:
            self.automated_score = automated_score
        if hostname is not None:
            self.hostname = hostname

    @property
    def automated_score(self):
        """Gets the automated_score of this DomainScore.  # noqa: E501

        The score of the domain  # noqa: E501

        :return: The automated_score of this DomainScore.  # noqa: E501
        :rtype: int
        """
        return self._automated_score

    @automated_score.setter
    def automated_score(self, automated_score):
        """Sets the automated_score of this DomainScore.

        The score of the domain  # noqa: E501

        :param automated_score: The automated_score of this DomainScore.  # noqa: E501
        :type: int
        """

        self._automated_score = automated_score

    @property
    def hostname(self):
        """Gets the hostname of this DomainScore.  # noqa: E501

        The hostname of the domain  # noqa: E501

        :return: The hostname of this DomainScore.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this DomainScore.

        The hostname of the domain  # noqa: E501

        :param hostname: The hostname of this DomainScore.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainScore, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainScore):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DomainScore):
            return True

        return self.to_dict() != other.to_dict()
