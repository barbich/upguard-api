# coding: utf-8

"""
    UpGuard CyberRisk API

    Access information from the CyberRisk platform programmatically using this API.  You can find or generate an API key to access this API in your CyberRisk Account Settings. Please authorize all requests by setting the \"Authorization\" header to your api key.  The base url for all public endpoints is https://cyber-risk.upguard.com/api/public  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from upguard.api_client import ApiClient


class VendorsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def additional_evidence(self, **kwargs):  # noqa: E501
        """Retrieve (one or more) vendor additional evidence documents by id  # noqa: E501

        Returns the body of one or more additional evidence documents that have been attached to a specific vendor. If multiple additional evidence documents are requested, then by default the files are returned as a multi-part mime response. Alternately, the zip option can be used to return multiple files as a single zip archive  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.additional_evidence(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] evidence_ids: a comma-separated list of one or more additional evidence instances (by unique id)
        :param bool zip: indicates that for multiple additional evidence requests, the files should be returned as a multi-file zip
        :return: GetVendorAdditionalEvidenceResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.additional_evidence_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.additional_evidence_with_http_info(**kwargs)  # noqa: E501
            return data

    def additional_evidence_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve (one or more) vendor additional evidence documents by id  # noqa: E501

        Returns the body of one or more additional evidence documents that have been attached to a specific vendor. If multiple additional evidence documents are requested, then by default the files are returned as a multi-part mime response. Alternately, the zip option can be used to return multiple files as a single zip archive  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.additional_evidence_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] evidence_ids: a comma-separated list of one or more additional evidence instances (by unique id)
        :param bool zip: indicates that for multiple additional evidence requests, the files should be returned as a multi-file zip
        :return: GetVendorAdditionalEvidenceResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['evidence_ids', 'zip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method additional_evidence" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'evidence_ids' in params:
            query_params.append(('evidence_ids', params['evidence_ids']))  # noqa: E501
            collection_formats['evidence_ids'] = 'multi'  # noqa: E501
        if 'zip' in params:
            query_params.append(('zip', params['zip']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/jpeg', 'image/png', 'application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/vendor/additionalevidence', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetVendorAdditionalEvidenceResponsePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def additional_evidences_list(self, **kwargs):  # noqa: E501
        """List vendor additional evidence instances  # noqa: E501

        Returns a list of additional evidence instances that have been uploaded against this vendor in chronological order of when they were uploaded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.additional_evidences_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vendor_primary_hostname: The primary hostname of the vendor to show additional evidence for.
        :param str page_token: The token of the page to be returned. Will return the first page if left blank.
        :param int page_size: The number of results to return per page. Valid values range from 10 to 2000. Defaults to 1000 if unset.
        :return: GetVendorAdditionalEvidencesResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.additional_evidences_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.additional_evidences_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def additional_evidences_list_with_http_info(self, **kwargs):  # noqa: E501
        """List vendor additional evidence instances  # noqa: E501

        Returns a list of additional evidence instances that have been uploaded against this vendor in chronological order of when they were uploaded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.additional_evidences_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vendor_primary_hostname: The primary hostname of the vendor to show additional evidence for.
        :param str page_token: The token of the page to be returned. Will return the first page if left blank.
        :param int page_size: The number of results to return per page. Valid values range from 10 to 2000. Defaults to 1000 if unset.
        :return: GetVendorAdditionalEvidencesResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vendor_primary_hostname', 'page_token', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method additional_evidences_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'vendor_primary_hostname' in params:
            query_params.append(('vendor_primary_hostname', params['vendor_primary_hostname']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/vendor/additionalevidence/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetVendorAdditionalEvidencesResponsePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def attachment(self, **kwargs):  # noqa: E501
        """Retrieve (one or more) vendor questionnaire attachments by id  # noqa: E501

        Returns the body of one or more questionnaire attachments that have been attached to a one or more vendor questionnaire instances. If multiple attachments are requested, then by default the files are returned as a multi-part mime response. Alternately, the zip option can be used to return multiple files as a single zip archive  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attachment(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] attachment_ids: a comma-separated list of one or more attachments (by unique id)
        :param bool zip: indicates that for multiple attachment requests, the files should be returned as a multi-file zip
        :return: GetVendorAttachmentResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attachment_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.attachment_with_http_info(**kwargs)  # noqa: E501
            return data

    def attachment_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve (one or more) vendor questionnaire attachments by id  # noqa: E501

        Returns the body of one or more questionnaire attachments that have been attached to a one or more vendor questionnaire instances. If multiple attachments are requested, then by default the files are returned as a multi-part mime response. Alternately, the zip option can be used to return multiple files as a single zip archive  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attachment_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] attachment_ids: a comma-separated list of one or more attachments (by unique id)
        :param bool zip: indicates that for multiple attachment requests, the files should be returned as a multi-file zip
        :return: GetVendorAttachmentResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['attachment_ids', 'zip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attachment" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'attachment_ids' in params:
            query_params.append(('attachment_ids', params['attachment_ids']))  # noqa: E501
            collection_formats['attachment_ids'] = 'multi'  # noqa: E501
        if 'zip' in params:
            query_params.append(('zip', params['zip']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/jpeg', 'image/png', 'application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/vendor/questionnaire/attachment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetVendorAttachmentResponsePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def attachments(self, **kwargs):  # noqa: E501
        """List vendor questionnaire attachments  # noqa: E501

        Returns a list of questionnaire attachments that have been attached to a specific questionnaire instance in chronological order of when they were uploaded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attachments(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int questionnaire_id: The id of the specific questionnaire of whose attachments are of interest
        :param str page_token: The token of the page to be returned. Will return the first page if left blank.
        :param int page_size: The number of results to return per page. Valid values range from 10 to 2000. Defaults to 1000 if unset.
        :return: GetVendorQuestionnaireAttachmentsResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attachments_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.attachments_with_http_info(**kwargs)  # noqa: E501
            return data

    def attachments_with_http_info(self, **kwargs):  # noqa: E501
        """List vendor questionnaire attachments  # noqa: E501

        Returns a list of questionnaire attachments that have been attached to a specific questionnaire instance in chronological order of when they were uploaded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attachments_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int questionnaire_id: The id of the specific questionnaire of whose attachments are of interest
        :param str page_token: The token of the page to be returned. Will return the first page if left blank.
        :param int page_size: The number of results to return per page. Valid values range from 10 to 2000. Defaults to 1000 if unset.
        :return: GetVendorQuestionnaireAttachmentsResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['questionnaire_id', 'page_token', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attachments" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'questionnaire_id' in params:
            query_params.append(('questionnaire_id', params['questionnaire_id']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/vendor/questionnaire/attachment/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetVendorQuestionnaireAttachmentsResponsePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def document(self, **kwargs):  # noqa: E501
        """Retrieve (one or more) vendor documents by id  # noqa: E501

        Returns the body of one or more documents that have been attached to a specific vendor. If multiple documents are requested, then by default the files are returned as a multi-part mime response. Alternately, the zip option can be used to return multiple files as a single zip archive  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.document(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] document_ids: a comma-separated list of one or more documents (by unique id)
        :param bool zip: indicates that for multiple document requests, the files should be returned as a multi-file zip
        :return: GetVendorDocumentResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.document_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.document_with_http_info(**kwargs)  # noqa: E501
            return data

    def document_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve (one or more) vendor documents by id  # noqa: E501

        Returns the body of one or more documents that have been attached to a specific vendor. If multiple documents are requested, then by default the files are returned as a multi-part mime response. Alternately, the zip option can be used to return multiple files as a single zip archive  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.document_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] document_ids: a comma-separated list of one or more documents (by unique id)
        :param bool zip: indicates that for multiple document requests, the files should be returned as a multi-file zip
        :return: GetVendorDocumentResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['document_ids', 'zip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method document" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'document_ids' in params:
            query_params.append(('document_ids', params['document_ids']))  # noqa: E501
            collection_formats['document_ids'] = 'multi'  # noqa: E501
        if 'zip' in params:
            query_params.append(('zip', params['zip']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/jpeg', 'image/png', 'application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/vendor/document', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetVendorDocumentResponsePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def documents(self, **kwargs):  # noqa: E501
        """List vendor documents  # noqa: E501

        Returns a list of documents that have been uploaded against this vendor in chronological order of when they were uploaded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.documents(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vendor_primary_hostname: The primary hostname of the vendor to show documents for.
        :param str page_token: The token of the page to be returned. Will return the first page if left blank.
        :param int page_size: The number of results to return per page. Valid values range from 10 to 2000. Defaults to 1000 if unset.
        :return: GetVendorDocumentsResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.documents_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.documents_with_http_info(**kwargs)  # noqa: E501
            return data

    def documents_with_http_info(self, **kwargs):  # noqa: E501
        """List vendor documents  # noqa: E501

        Returns a list of documents that have been uploaded against this vendor in chronological order of when they were uploaded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.documents_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vendor_primary_hostname: The primary hostname of the vendor to show documents for.
        :param str page_token: The token of the page to be returned. Will return the first page if left blank.
        :param int page_size: The number of results to return per page. Valid values range from 10 to 2000. Defaults to 1000 if unset.
        :return: GetVendorDocumentsResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vendor_primary_hostname', 'page_token', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method documents" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'vendor_primary_hostname' in params:
            query_params.append(('vendor_primary_hostname', params['vendor_primary_hostname']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/vendor/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetVendorDocumentsResponsePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def questionnaires(self, **kwargs):  # noqa: E501
        """List vendor questionnaires  # noqa: E501

        Returns a list of questionnaires that have been sent to this vendor in chronological order of when they were sent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.questionnaires(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vendor_primary_hostname: The primary hostname of the vendor to which the questionnaires were sent.
        :param str page_token: The token of the page to be returned. Will return the first page if left blank.
        :param int page_size: The number of results to return per page. Valid values range from 10 to 2000. Defaults to 1000 if unset.
        :param str usage_type: The usage type of questionnaires to return Valid values: security, relationship Defaults to 'security' if not set
        :return: GetVendorQuestionnairesV1ResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.questionnaires_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.questionnaires_with_http_info(**kwargs)  # noqa: E501
            return data

    def questionnaires_with_http_info(self, **kwargs):  # noqa: E501
        """List vendor questionnaires  # noqa: E501

        Returns a list of questionnaires that have been sent to this vendor in chronological order of when they were sent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.questionnaires_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vendor_primary_hostname: The primary hostname of the vendor to which the questionnaires were sent.
        :param str page_token: The token of the page to be returned. Will return the first page if left blank.
        :param int page_size: The number of results to return per page. Valid values range from 10 to 2000. Defaults to 1000 if unset.
        :param str usage_type: The usage type of questionnaires to return Valid values: security, relationship Defaults to 'security' if not set
        :return: GetVendorQuestionnairesV1ResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vendor_primary_hostname', 'page_token', 'page_size', 'usage_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method questionnaires" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'vendor_primary_hostname' in params:
            query_params.append(('vendor_primary_hostname', params['vendor_primary_hostname']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'usage_type' in params:
            query_params.append(('usage_type', params['usage_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/vendor/questionnaires', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetVendorQuestionnairesV1ResponsePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def questionnaires_v2(self, **kwargs):  # noqa: E501
        """List vendor questionnaires  # noqa: E501

        Returns a list of questionnaires that have been sent to this vendor in chronological order of when they were sent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.questionnaires_v2(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vendor_primary_hostname: The primary hostname of the vendor to which the questionnaires were sent.
        :param str usage_type: The usage type of questionnaires to return Valid values: security, relationship Defaults to 'security' if not set
        :param bool exclude_archived: Optionally exclude archived questionnaires
        :return: GetVendorQuestionnairesV2ResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.questionnaires_v2_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.questionnaires_v2_with_http_info(**kwargs)  # noqa: E501
            return data

    def questionnaires_v2_with_http_info(self, **kwargs):  # noqa: E501
        """List vendor questionnaires  # noqa: E501

        Returns a list of questionnaires that have been sent to this vendor in chronological order of when they were sent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.questionnaires_v2_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vendor_primary_hostname: The primary hostname of the vendor to which the questionnaires were sent.
        :param str usage_type: The usage type of questionnaires to return Valid values: security, relationship Defaults to 'security' if not set
        :param bool exclude_archived: Optionally exclude archived questionnaires
        :return: GetVendorQuestionnairesV2ResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vendor_primary_hostname', 'usage_type', 'exclude_archived']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method questionnaires_v2" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'vendor_primary_hostname' in params:
            query_params.append(('vendor_primary_hostname', params['vendor_primary_hostname']))  # noqa: E501
        if 'usage_type' in params:
            query_params.append(('usage_type', params['usage_type']))  # noqa: E501
        if 'exclude_archived' in params:
            query_params.append(('exclude_archived', params['exclude_archived']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/vendor/questionnaires/v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetVendorQuestionnairesV2ResponsePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vendor(self, **kwargs):  # noqa: E501
        """Get vendor details  # noqa: E501

        The following assertions are evaluated (in order) to determine whether you are licensed to view the vendor data (as soon as one assertion returns \"true\", the vendor data will be returned): 1. You are currently monitoring the vendor in CyberRisk 2. You have set \"start_monitoring\" to \"true\" AND are not currently monitoring all the vendors you are licensed for in CyberRisk 3. You have set \"generate_ad_hoc_report\" to \"true\" and have not currently used your monthly allocation of ad-hoc reports in CyberRisk.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendor(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the vendor for which to return vendor data. e.g. 123456789
        :param str hostname: The hostname for which to return vendor data. e.g. \"upguard.com\". Required when id is not specified. When id is specified this field will be ignored.
        :param bool generate_ad_hoc_report: When set to true, if you haven't already used your monthly allocation of ad-hoc reports, generate an ad-hoc report for the given vendor, and return the vendor data.
        :param bool start_monitoring: When set to true, if the vendor is not already being monitored, and if you are not already monitoring all the vendors your are licensed for, start monitoring the vendor, and return the vendor data.
        :param list[str] labels: The labels to assign to the vendor if start monitoring set to true. If you want to update the labels for an already monitored vendor use the /vendor/labels endpoint.
        :param int tier: The tier to assign to the vendor if start monitoring is set to true.
        :param bool wait_for_scan: Flag indicating whether the request should wait for scan results on new unknown vendors
        :return: Vendor
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vendor_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.vendor_with_http_info(**kwargs)  # noqa: E501
            return data

    def vendor_with_http_info(self, **kwargs):  # noqa: E501
        """Get vendor details  # noqa: E501

        The following assertions are evaluated (in order) to determine whether you are licensed to view the vendor data (as soon as one assertion returns \"true\", the vendor data will be returned): 1. You are currently monitoring the vendor in CyberRisk 2. You have set \"start_monitoring\" to \"true\" AND are not currently monitoring all the vendors you are licensed for in CyberRisk 3. You have set \"generate_ad_hoc_report\" to \"true\" and have not currently used your monthly allocation of ad-hoc reports in CyberRisk.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendor_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The ID of the vendor for which to return vendor data. e.g. 123456789
        :param str hostname: The hostname for which to return vendor data. e.g. \"upguard.com\". Required when id is not specified. When id is specified this field will be ignored.
        :param bool generate_ad_hoc_report: When set to true, if you haven't already used your monthly allocation of ad-hoc reports, generate an ad-hoc report for the given vendor, and return the vendor data.
        :param bool start_monitoring: When set to true, if the vendor is not already being monitored, and if you are not already monitoring all the vendors your are licensed for, start monitoring the vendor, and return the vendor data.
        :param list[str] labels: The labels to assign to the vendor if start monitoring set to true. If you want to update the labels for an already monitored vendor use the /vendor/labels endpoint.
        :param int tier: The tier to assign to the vendor if start monitoring is set to true.
        :param bool wait_for_scan: Flag indicating whether the request should wait for scan results on new unknown vendors
        :return: Vendor
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'hostname', 'generate_ad_hoc_report', 'start_monitoring', 'labels', 'tier', 'wait_for_scan']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vendor" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'hostname' in params:
            query_params.append(('hostname', params['hostname']))  # noqa: E501
        if 'generate_ad_hoc_report' in params:
            query_params.append(('generate_ad_hoc_report', params['generate_ad_hoc_report']))  # noqa: E501
        if 'start_monitoring' in params:
            query_params.append(('start_monitoring', params['start_monitoring']))  # noqa: E501
        if 'labels' in params:
            query_params.append(('labels', params['labels']))  # noqa: E501
            collection_formats['labels'] = 'multi'  # noqa: E501
        if 'tier' in params:
            query_params.append(('tier', params['tier']))  # noqa: E501
        if 'wait_for_scan' in params:
            query_params.append(('wait_for_scan', params['wait_for_scan']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/vendor', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Vendor',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vendor_domain_details(self, vendor_primary_hostname, hostname, **kwargs):  # noqa: E501
        """Retrieve details for a domain  # noqa: E501

        Returns the details for a domain. It will return 422 when requesting details of an inactive domain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendor_domain_details(vendor_primary_hostname, hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vendor_primary_hostname: The primary hostname of the vendor to show the domain detail for. (required)
        :param str hostname: The hostname for which to return the details, e.g. \"upguard.com\" (required)
        :return: GetDomainDetailsV1RespBody
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vendor_domain_details_with_http_info(vendor_primary_hostname, hostname, **kwargs)  # noqa: E501
        else:
            (data) = self.vendor_domain_details_with_http_info(vendor_primary_hostname, hostname, **kwargs)  # noqa: E501
            return data

    def vendor_domain_details_with_http_info(self, vendor_primary_hostname, hostname, **kwargs):  # noqa: E501
        """Retrieve details for a domain  # noqa: E501

        Returns the details for a domain. It will return 422 when requesting details of an inactive domain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendor_domain_details_with_http_info(vendor_primary_hostname, hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vendor_primary_hostname: The primary hostname of the vendor to show the domain detail for. (required)
        :param str hostname: The hostname for which to return the details, e.g. \"upguard.com\" (required)
        :return: GetDomainDetailsV1RespBody
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vendor_primary_hostname', 'hostname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vendor_domain_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vendor_primary_hostname' is set
        if self.api_client.client_side_validation and ('vendor_primary_hostname' not in params or
                                                       params['vendor_primary_hostname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `vendor_primary_hostname` when calling `vendor_domain_details`")  # noqa: E501
        # verify the required parameter 'hostname' is set
        if self.api_client.client_side_validation and ('hostname' not in params or
                                                       params['hostname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `hostname` when calling `vendor_domain_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'vendor_primary_hostname' in params:
            query_params.append(('vendor_primary_hostname', params['vendor_primary_hostname']))  # noqa: E501
        if 'hostname' in params:
            query_params.append(('hostname', params['hostname']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/vendor/domain', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDomainDetailsV1RespBody',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vendor_domain_update_labels(self, vendor_primary_hostname, hostname, labels, **kwargs):  # noqa: E501
        """Assign labels to an domain  # noqa: E501

        Assign labels to a domain. To remove all labels pass an empty list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendor_domain_update_labels(vendor_primary_hostname, hostname, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vendor_primary_hostname: The primary hostname of the vendor to update the domain labels for. (required)
        :param int hostname: The hostname to update labels for (required)
        :param list[str] labels: The labels to assign to the domain. You can pass an empty array to remove all labels. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vendor_domain_update_labels_with_http_info(vendor_primary_hostname, hostname, labels, **kwargs)  # noqa: E501
        else:
            (data) = self.vendor_domain_update_labels_with_http_info(vendor_primary_hostname, hostname, labels, **kwargs)  # noqa: E501
            return data

    def vendor_domain_update_labels_with_http_info(self, vendor_primary_hostname, hostname, labels, **kwargs):  # noqa: E501
        """Assign labels to an domain  # noqa: E501

        Assign labels to a domain. To remove all labels pass an empty list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendor_domain_update_labels_with_http_info(vendor_primary_hostname, hostname, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vendor_primary_hostname: The primary hostname of the vendor to update the domain labels for. (required)
        :param int hostname: The hostname to update labels for (required)
        :param list[str] labels: The labels to assign to the domain. You can pass an empty array to remove all labels. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vendor_primary_hostname', 'hostname', 'labels']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vendor_domain_update_labels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vendor_primary_hostname' is set
        if self.api_client.client_side_validation and ('vendor_primary_hostname' not in params or
                                                       params['vendor_primary_hostname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `vendor_primary_hostname` when calling `vendor_domain_update_labels`")  # noqa: E501
        # verify the required parameter 'hostname' is set
        if self.api_client.client_side_validation and ('hostname' not in params or
                                                       params['hostname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `hostname` when calling `vendor_domain_update_labels`")  # noqa: E501
        # verify the required parameter 'labels' is set
        if self.api_client.client_side_validation and ('labels' not in params or
                                                       params['labels'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `labels` when calling `vendor_domain_update_labels`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'vendor_primary_hostname' in params:
            query_params.append(('vendor_primary_hostname', params['vendor_primary_hostname']))  # noqa: E501
        if 'hostname' in params:
            query_params.append(('hostname', params['hostname']))  # noqa: E501
        if 'labels' in params:
            query_params.append(('labels', params['labels']))  # noqa: E501
            collection_formats['labels'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/vendor/domain/labels', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vendor_domains(self, vendor_primary_hostname, **kwargs):  # noqa: E501
        """List vendor domains  # noqa: E501

        Returns a list of domains for a vendor.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendor_domains(vendor_primary_hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vendor_primary_hostname: The primary hostname of the vendor to show domains for. (required)
        :param bool active: Retrieve active domains
        :param bool inactive: Retrieve inactive domains
        :param list[str] labels: Filter result by the provided labels
        :param str page_token: The `page_token` from a previous request, use this to get the next page of results.
        :param int page_size: The number of results to return per page.
        :param str sort_by: The value to sort the domains by  If not specified will default to `domain` and set `sort_desc` to `true`
        :param bool sort_desc: Whether or not to sort the results in descending order
        :return: GetDomainsV1RespBody
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vendor_domains_with_http_info(vendor_primary_hostname, **kwargs)  # noqa: E501
        else:
            (data) = self.vendor_domains_with_http_info(vendor_primary_hostname, **kwargs)  # noqa: E501
            return data

    def vendor_domains_with_http_info(self, vendor_primary_hostname, **kwargs):  # noqa: E501
        """List vendor domains  # noqa: E501

        Returns a list of domains for a vendor.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendor_domains_with_http_info(vendor_primary_hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vendor_primary_hostname: The primary hostname of the vendor to show domains for. (required)
        :param bool active: Retrieve active domains
        :param bool inactive: Retrieve inactive domains
        :param list[str] labels: Filter result by the provided labels
        :param str page_token: The `page_token` from a previous request, use this to get the next page of results.
        :param int page_size: The number of results to return per page.
        :param str sort_by: The value to sort the domains by  If not specified will default to `domain` and set `sort_desc` to `true`
        :param bool sort_desc: Whether or not to sort the results in descending order
        :return: GetDomainsV1RespBody
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vendor_primary_hostname', 'active', 'inactive', 'labels', 'page_token', 'page_size', 'sort_by', 'sort_desc']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vendor_domains" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vendor_primary_hostname' is set
        if self.api_client.client_side_validation and ('vendor_primary_hostname' not in params or
                                                       params['vendor_primary_hostname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `vendor_primary_hostname` when calling `vendor_domains`")  # noqa: E501

        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] > 2000):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `vendor_domains`, must be a value less than or equal to `2000`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] < 10):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `vendor_domains`, must be a value greater than or equal to `10`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'vendor_primary_hostname' in params:
            query_params.append(('vendor_primary_hostname', params['vendor_primary_hostname']))  # noqa: E501
        if 'active' in params:
            query_params.append(('active', params['active']))  # noqa: E501
        if 'inactive' in params:
            query_params.append(('inactive', params['inactive']))  # noqa: E501
        if 'labels' in params:
            query_params.append(('labels', params['labels']))  # noqa: E501
            collection_formats['labels'] = 'multi'  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'sort_desc' in params:
            query_params.append(('sort_desc', params['sort_desc']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/vendor/domains', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDomainsV1RespBody',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vendor_ip_details(self, vendor_primary_hostname, ip, **kwargs):  # noqa: E501
        """Retrieve details for an IP address  # noqa: E501

        Returns the details of the IP address. It will return 422 when requesting details of an inactive IP address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendor_ip_details(vendor_primary_hostname, ip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vendor_primary_hostname: The primary hostname of the vendor to show the IP detail for. (required)
        :param str ip: The IP address to get details for (required)
        :return: GetIpDetailsV1RespBody
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vendor_ip_details_with_http_info(vendor_primary_hostname, ip, **kwargs)  # noqa: E501
        else:
            (data) = self.vendor_ip_details_with_http_info(vendor_primary_hostname, ip, **kwargs)  # noqa: E501
            return data

    def vendor_ip_details_with_http_info(self, vendor_primary_hostname, ip, **kwargs):  # noqa: E501
        """Retrieve details for an IP address  # noqa: E501

        Returns the details of the IP address. It will return 422 when requesting details of an inactive IP address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendor_ip_details_with_http_info(vendor_primary_hostname, ip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vendor_primary_hostname: The primary hostname of the vendor to show the IP detail for. (required)
        :param str ip: The IP address to get details for (required)
        :return: GetIpDetailsV1RespBody
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vendor_primary_hostname', 'ip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vendor_ip_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vendor_primary_hostname' is set
        if self.api_client.client_side_validation and ('vendor_primary_hostname' not in params or
                                                       params['vendor_primary_hostname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `vendor_primary_hostname` when calling `vendor_ip_details`")  # noqa: E501
        # verify the required parameter 'ip' is set
        if self.api_client.client_side_validation and ('ip' not in params or
                                                       params['ip'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ip` when calling `vendor_ip_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'vendor_primary_hostname' in params:
            query_params.append(('vendor_primary_hostname', params['vendor_primary_hostname']))  # noqa: E501
        if 'ip' in params:
            query_params.append(('ip', params['ip']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/vendor/ip', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetIpDetailsV1RespBody',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vendor_ip_update_labels(self, vendor_primary_hostname, ip, labels, **kwargs):  # noqa: E501
        """Assign labels to an IP  # noqa: E501

        Assign labels to an IP. To remove all labels pass an empty list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendor_ip_update_labels(vendor_primary_hostname, ip, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vendor_primary_hostname: The primary hostname of the vendor to update the IP labels for. (required)
        :param int ip: The IP to update labels for (required)
        :param list[str] labels: The labels to assign to the IP. You can pass an empty array to remove all labels. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vendor_ip_update_labels_with_http_info(vendor_primary_hostname, ip, labels, **kwargs)  # noqa: E501
        else:
            (data) = self.vendor_ip_update_labels_with_http_info(vendor_primary_hostname, ip, labels, **kwargs)  # noqa: E501
            return data

    def vendor_ip_update_labels_with_http_info(self, vendor_primary_hostname, ip, labels, **kwargs):  # noqa: E501
        """Assign labels to an IP  # noqa: E501

        Assign labels to an IP. To remove all labels pass an empty list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendor_ip_update_labels_with_http_info(vendor_primary_hostname, ip, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vendor_primary_hostname: The primary hostname of the vendor to update the IP labels for. (required)
        :param int ip: The IP to update labels for (required)
        :param list[str] labels: The labels to assign to the IP. You can pass an empty array to remove all labels. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vendor_primary_hostname', 'ip', 'labels']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vendor_ip_update_labels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vendor_primary_hostname' is set
        if self.api_client.client_side_validation and ('vendor_primary_hostname' not in params or
                                                       params['vendor_primary_hostname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `vendor_primary_hostname` when calling `vendor_ip_update_labels`")  # noqa: E501
        # verify the required parameter 'ip' is set
        if self.api_client.client_side_validation and ('ip' not in params or
                                                       params['ip'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ip` when calling `vendor_ip_update_labels`")  # noqa: E501
        # verify the required parameter 'labels' is set
        if self.api_client.client_side_validation and ('labels' not in params or
                                                       params['labels'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `labels` when calling `vendor_ip_update_labels`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'vendor_primary_hostname' in params:
            query_params.append(('vendor_primary_hostname', params['vendor_primary_hostname']))  # noqa: E501
        if 'ip' in params:
            query_params.append(('ip', params['ip']))  # noqa: E501
        if 'labels' in params:
            query_params.append(('labels', params['labels']))  # noqa: E501
            collection_formats['labels'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/vendor/ip/labels', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vendor_ips(self, vendor_primary_hostname, **kwargs):  # noqa: E501
        """List vendor ips  # noqa: E501

        Returns a list of ips for a vendor.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendor_ips(vendor_primary_hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vendor_primary_hostname: The primary hostname of the vendor to show ips for. (required)
        :param list[str] labels: Filter result by the provided labels
        :param str page_token: The `page_token` from a previous request, use this to get the next page of results.
        :param int page_size: The number of results to return per page.
        :param str sort_by: The value to sort the IPs by  If not specified will default to `ip` and set `sort_desc` to `true`
        :param bool sort_desc: Whether or not to sort the results in descending order
        :return: GetIPsV1RespBody
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vendor_ips_with_http_info(vendor_primary_hostname, **kwargs)  # noqa: E501
        else:
            (data) = self.vendor_ips_with_http_info(vendor_primary_hostname, **kwargs)  # noqa: E501
            return data

    def vendor_ips_with_http_info(self, vendor_primary_hostname, **kwargs):  # noqa: E501
        """List vendor ips  # noqa: E501

        Returns a list of ips for a vendor.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendor_ips_with_http_info(vendor_primary_hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vendor_primary_hostname: The primary hostname of the vendor to show ips for. (required)
        :param list[str] labels: Filter result by the provided labels
        :param str page_token: The `page_token` from a previous request, use this to get the next page of results.
        :param int page_size: The number of results to return per page.
        :param str sort_by: The value to sort the IPs by  If not specified will default to `ip` and set `sort_desc` to `true`
        :param bool sort_desc: Whether or not to sort the results in descending order
        :return: GetIPsV1RespBody
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vendor_primary_hostname', 'labels', 'page_token', 'page_size', 'sort_by', 'sort_desc']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vendor_ips" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vendor_primary_hostname' is set
        if self.api_client.client_side_validation and ('vendor_primary_hostname' not in params or
                                                       params['vendor_primary_hostname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `vendor_primary_hostname` when calling `vendor_ips`")  # noqa: E501

        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] > 2000):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `vendor_ips`, must be a value less than or equal to `2000`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] < 10):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `vendor_ips`, must be a value greater than or equal to `10`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'vendor_primary_hostname' in params:
            query_params.append(('vendor_primary_hostname', params['vendor_primary_hostname']))  # noqa: E501
        if 'labels' in params:
            query_params.append(('labels', params['labels']))  # noqa: E501
            collection_formats['labels'] = 'multi'  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'sort_desc' in params:
            query_params.append(('sort_desc', params['sort_desc']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/vendor/ips', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetIPsV1RespBody',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vendor_ranges(self, vendor_primary_hostname, **kwargs):  # noqa: E501
        """List vendor ip ranges  # noqa: E501

        Returns a list of ip ranges for a vendor.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendor_ranges(vendor_primary_hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vendor_primary_hostname: The primary hostname of the vendor to show ips for. (required)
        :param list[str] labels: Filter result by the provided labels
        :param str page_token: The `page_token` from a previous request, use this to get the next page of results.
        :param int page_size: The number of results to return per page.
        :param str sort_by: The value to sort the IP ranges by  If not specified will default to `num_ips` and set `sort_desc` to `true`
        :param bool sort_desc: Whether or not to sort the results in descending order
        :return: GetRangesV1RespBody
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vendor_ranges_with_http_info(vendor_primary_hostname, **kwargs)  # noqa: E501
        else:
            (data) = self.vendor_ranges_with_http_info(vendor_primary_hostname, **kwargs)  # noqa: E501
            return data

    def vendor_ranges_with_http_info(self, vendor_primary_hostname, **kwargs):  # noqa: E501
        """List vendor ip ranges  # noqa: E501

        Returns a list of ip ranges for a vendor.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendor_ranges_with_http_info(vendor_primary_hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vendor_primary_hostname: The primary hostname of the vendor to show ips for. (required)
        :param list[str] labels: Filter result by the provided labels
        :param str page_token: The `page_token` from a previous request, use this to get the next page of results.
        :param int page_size: The number of results to return per page.
        :param str sort_by: The value to sort the IP ranges by  If not specified will default to `num_ips` and set `sort_desc` to `true`
        :param bool sort_desc: Whether or not to sort the results in descending order
        :return: GetRangesV1RespBody
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vendor_primary_hostname', 'labels', 'page_token', 'page_size', 'sort_by', 'sort_desc']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vendor_ranges" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vendor_primary_hostname' is set
        if self.api_client.client_side_validation and ('vendor_primary_hostname' not in params or
                                                       params['vendor_primary_hostname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `vendor_primary_hostname` when calling `vendor_ranges`")  # noqa: E501

        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] > 2000):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `vendor_ranges`, must be a value less than or equal to `2000`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] < 10):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `vendor_ranges`, must be a value greater than or equal to `10`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'vendor_primary_hostname' in params:
            query_params.append(('vendor_primary_hostname', params['vendor_primary_hostname']))  # noqa: E501
        if 'labels' in params:
            query_params.append(('labels', params['labels']))  # noqa: E501
            collection_formats['labels'] = 'multi'  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'sort_desc' in params:
            query_params.append(('sort_desc', params['sort_desc']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/vendor/ranges', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetRangesV1RespBody',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vendor_update_attributes(self, **kwargs):  # noqa: E501
        """Assign or update the attributes for a vendor  # noqa: E501

        Assign or update the attributes for a vendor. To remove an attribute use null as its value in the payload.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendor_update_attributes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateVendorAttributesV1RequestBody update_vendor_attributes_v1_request_body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vendor_update_attributes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.vendor_update_attributes_with_http_info(**kwargs)  # noqa: E501
            return data

    def vendor_update_attributes_with_http_info(self, **kwargs):  # noqa: E501
        """Assign or update the attributes for a vendor  # noqa: E501

        Assign or update the attributes for a vendor. To remove an attribute use null as its value in the payload.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendor_update_attributes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateVendorAttributesV1RequestBody update_vendor_attributes_v1_request_body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['update_vendor_attributes_v1_request_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vendor_update_attributes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_vendor_attributes_v1_request_body' in params:
            body_params = params['update_vendor_attributes_v1_request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/vendor/attributes', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vendor_update_labels(self, vendor_primary_hostname, labels, **kwargs):  # noqa: E501
        """Assign labels to a vendor  # noqa: E501

        Assign labels to a vendor. To remove all labels pass an empty list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendor_update_labels(vendor_primary_hostname, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vendor_primary_hostname: The primary hostname of the vendor to update labels for. (required)
        :param list[str] labels: The labels to assign to the vendor. You can pass an empty array to remove all labels. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vendor_update_labels_with_http_info(vendor_primary_hostname, labels, **kwargs)  # noqa: E501
        else:
            (data) = self.vendor_update_labels_with_http_info(vendor_primary_hostname, labels, **kwargs)  # noqa: E501
            return data

    def vendor_update_labels_with_http_info(self, vendor_primary_hostname, labels, **kwargs):  # noqa: E501
        """Assign labels to a vendor  # noqa: E501

        Assign labels to a vendor. To remove all labels pass an empty list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendor_update_labels_with_http_info(vendor_primary_hostname, labels, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vendor_primary_hostname: The primary hostname of the vendor to update labels for. (required)
        :param list[str] labels: The labels to assign to the vendor. You can pass an empty array to remove all labels. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vendor_primary_hostname', 'labels']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vendor_update_labels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vendor_primary_hostname' is set
        if self.api_client.client_side_validation and ('vendor_primary_hostname' not in params or
                                                       params['vendor_primary_hostname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `vendor_primary_hostname` when calling `vendor_update_labels`")  # noqa: E501
        # verify the required parameter 'labels' is set
        if self.api_client.client_side_validation and ('labels' not in params or
                                                       params['labels'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `labels` when calling `vendor_update_labels`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'vendor_primary_hostname' in params:
            query_params.append(('vendor_primary_hostname', params['vendor_primary_hostname']))  # noqa: E501
        if 'labels' in params:
            query_params.append(('labels', params['labels']))  # noqa: E501
            collection_formats['labels'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/vendor/labels', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vendor_update_tier(self, vendor_primary_hostname, tier, **kwargs):  # noqa: E501
        """Assign tier to a vendor  # noqa: E501

        Assign tier to a vendor. To remove a tier pass a value of zero.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendor_update_tier(vendor_primary_hostname, tier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vendor_primary_hostname: The primary hostname of the vendor to update tier for. (required)
        :param int tier: The tier to assign to the vendor. You can pass a value of zero to remove a tier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vendor_update_tier_with_http_info(vendor_primary_hostname, tier, **kwargs)  # noqa: E501
        else:
            (data) = self.vendor_update_tier_with_http_info(vendor_primary_hostname, tier, **kwargs)  # noqa: E501
            return data

    def vendor_update_tier_with_http_info(self, vendor_primary_hostname, tier, **kwargs):  # noqa: E501
        """Assign tier to a vendor  # noqa: E501

        Assign tier to a vendor. To remove a tier pass a value of zero.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendor_update_tier_with_http_info(vendor_primary_hostname, tier, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vendor_primary_hostname: The primary hostname of the vendor to update tier for. (required)
        :param int tier: The tier to assign to the vendor. You can pass a value of zero to remove a tier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vendor_primary_hostname', 'tier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vendor_update_tier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vendor_primary_hostname' is set
        if self.api_client.client_side_validation and ('vendor_primary_hostname' not in params or
                                                       params['vendor_primary_hostname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `vendor_primary_hostname` when calling `vendor_update_tier`")  # noqa: E501
        # verify the required parameter 'tier' is set
        if self.api_client.client_side_validation and ('tier' not in params or
                                                       params['tier'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tier` when calling `vendor_update_tier`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'vendor_primary_hostname' in params:
            query_params.append(('vendor_primary_hostname', params['vendor_primary_hostname']))  # noqa: E501
        if 'tier' in params:
            query_params.append(('tier', params['tier']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/vendor/tier', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vendors(self, **kwargs):  # noqa: E501
        """List monitored vendors  # noqa: E501

        If the include_ad_hoc_reports parameter is set to true then vendors with ad hoc reports available will also be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendors(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool include_ad_hoc_reports: Include vendors with an existing ad hoc report in the results.
        :param str page_token: The token of the page to be returned. Will return the first page if left blank.
        :param int page_size: The number of results to return per page. Valid values range from 10 to 2000. Defaults to 1000 if unset.
        :param list[str] labels: Filter result by the provided labels
        :param bool include_risks: Include risks
        :return: VendorsResponsePayloadBody
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vendors_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.vendors_with_http_info(**kwargs)  # noqa: E501
            return data

    def vendors_with_http_info(self, **kwargs):  # noqa: E501
        """List monitored vendors  # noqa: E501

        If the include_ad_hoc_reports parameter is set to true then vendors with ad hoc reports available will also be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendors_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool include_ad_hoc_reports: Include vendors with an existing ad hoc report in the results.
        :param str page_token: The token of the page to be returned. Will return the first page if left blank.
        :param int page_size: The number of results to return per page. Valid values range from 10 to 2000. Defaults to 1000 if unset.
        :param list[str] labels: Filter result by the provided labels
        :param bool include_risks: Include risks
        :return: VendorsResponsePayloadBody
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['include_ad_hoc_reports', 'page_token', 'page_size', 'labels', 'include_risks']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vendors" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_ad_hoc_reports' in params:
            query_params.append(('include_ad_hoc_reports', params['include_ad_hoc_reports']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'labels' in params:
            query_params.append(('labels', params['labels']))  # noqa: E501
            collection_formats['labels'] = 'multi'  # noqa: E501
        if 'include_risks' in params:
            query_params.append(('include_risks', params['include_risks']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/vendors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VendorsResponsePayloadBody',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
