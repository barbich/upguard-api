# coding: utf-8

"""
    UpGuard CyberRisk API

    Access information from the CyberRisk platform programmatically using this API.  You can find or generate an API key to access this API in your CyberRisk Account Settings. Please authorize all requests by setting the \"Authorization\" header to your api key.  The base url for all public endpoints is https://cyber-risk.upguard.com/api/public  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from upguard.api_client import ApiClient


class WebhooksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_webhook(self, name, hook_url, notification_type_ids, **kwargs):  # noqa: E501
        """Create a new webhook  # noqa: E501

        Create a new webhook subscribing to the provided list of notifications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_webhook(name, hook_url, notification_type_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name given to the webhook (required)
        :param str hook_url: The URL used for sending notifications (required)
        :param list[str] notification_type_ids: The list of notifications to subscribe to. For a list of supported notification types and their IDs use the /api/public/webhooks/notification_types endpoint. (required)
        :param str webhook_type: The type of webhook to create
        :return: CreateWebhookResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_webhook_with_http_info(name, hook_url, notification_type_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.create_webhook_with_http_info(name, hook_url, notification_type_ids, **kwargs)  # noqa: E501
            return data

    def create_webhook_with_http_info(self, name, hook_url, notification_type_ids, **kwargs):  # noqa: E501
        """Create a new webhook  # noqa: E501

        Create a new webhook subscribing to the provided list of notifications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_webhook_with_http_info(name, hook_url, notification_type_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name given to the webhook (required)
        :param str hook_url: The URL used for sending notifications (required)
        :param list[str] notification_type_ids: The list of notifications to subscribe to. For a list of supported notification types and their IDs use the /api/public/webhooks/notification_types endpoint. (required)
        :param str webhook_type: The type of webhook to create
        :return: CreateWebhookResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'hook_url', 'notification_type_ids', 'webhook_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_webhook" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `create_webhook`")  # noqa: E501
        # verify the required parameter 'hook_url' is set
        if self.api_client.client_side_validation and ('hook_url' not in params or
                                                       params['hook_url'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `hook_url` when calling `create_webhook`")  # noqa: E501
        # verify the required parameter 'notification_type_ids' is set
        if self.api_client.client_side_validation and ('notification_type_ids' not in params or
                                                       params['notification_type_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `notification_type_ids` when calling `create_webhook`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'hook_url' in params:
            query_params.append(('hook_url', params['hook_url']))  # noqa: E501
        if 'notification_type_ids' in params:
            query_params.append(('notification_type_ids', params['notification_type_ids']))  # noqa: E501
            collection_formats['notification_type_ids'] = 'multi'  # noqa: E501
        if 'webhook_type' in params:
            query_params.append(('webhook_type', params['webhook_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateWebhookResponsePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_webhook(self, id, **kwargs):  # noqa: E501
        """Delete a webhook  # noqa: E501

        Delete a webhook by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_webhook(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the webhook to delete (required)
        :return: DeleteWebhookResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_webhook_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_webhook_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_webhook_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a webhook  # noqa: E501

        Delete a webhook by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_webhook_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the webhook to delete (required)
        :return: DeleteWebhookResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_webhook" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_webhook`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteWebhookResponsePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_webhooks(self, **kwargs):  # noqa: E501
        """List webhooks  # noqa: E501

        List all registered webhooks.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_webhooks(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ListWebhookResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_webhooks_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_webhooks_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_webhooks_with_http_info(self, **kwargs):  # noqa: E501
        """List webhooks  # noqa: E501

        List all registered webhooks.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_webhooks_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ListWebhookResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_webhooks" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListWebhookResponsePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_webhook(self, **kwargs):  # noqa: E501
        """Webhook example data  # noqa: E501

        Get the example data for one or more notification types.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_webhook(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of a webhook. If specified sample data for all the notification types registered for that webhook will be returned.
        :param list[str] notification_type_ids: A list of notification type IDs you need sample data for. If a webhook ID is provided this parameter is ignored.
        :return: ExampleDataWebhookResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sample_webhook_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sample_webhook_with_http_info(**kwargs)  # noqa: E501
            return data

    def sample_webhook_with_http_info(self, **kwargs):  # noqa: E501
        """Webhook example data  # noqa: E501

        Get the example data for one or more notification types.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_webhook_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of a webhook. If specified sample data for all the notification types registered for that webhook will be returned.
        :param list[str] notification_type_ids: A list of notification type IDs you need sample data for. If a webhook ID is provided this parameter is ignored.
        :return: ExampleDataWebhookResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'notification_type_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_webhook" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'notification_type_ids' in params:
            query_params.append(('notification_type_ids', params['notification_type_ids']))  # noqa: E501
            collection_formats['notification_type_ids'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks/sample', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExampleDataWebhookResponsePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webhooks_notification_types(self, **kwargs):  # noqa: E501
        """Webhook notification types  # noqa: E501

        Get a list of available webhook notification types and their descriptions for your organisation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_notification_types(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetWebhookNotificationTypesResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webhooks_notification_types_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.webhooks_notification_types_with_http_info(**kwargs)  # noqa: E501
            return data

    def webhooks_notification_types_with_http_info(self, **kwargs):  # noqa: E501
        """Webhook notification types  # noqa: E501

        Get a list of available webhook notification types and their descriptions for your organisation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhooks_notification_types_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetWebhookNotificationTypesResponsePayload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhooks_notification_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/webhooks/notification_types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetWebhookNotificationTypesResponsePayload',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
