# coding: utf-8

"""
    UpGuard CyberRisk API

    Access information from the CyberRisk platform programmatically using this API.  You can find or generate an API key to access this API in your CyberRisk Account Settings. Please authorize all requests by setting the \"Authorization\" header to your api key.  The base url for all public endpoints is https://cyber-risk.upguard.com/api/public  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from upguard.api_client import ApiClient


class DataleaksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def dataleaks_disclosures(self, **kwargs):  # noqa: E501
        """Get a list of disclosures  # noqa: E501

        Returns a list of the disclosures in your account matching the given filters.  Required API key permissions: `DataLeaks` (select when creating API key in Account Settings)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dataleaks_disclosures(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime min_time: The minimum (non-inclusive) timestamp of a disclosure (RFC 3339 format).
        :param datetime max_time: The maximum (non-inclusive) timestamp of a disclosure (RFC 3339 format).
        :param str statuses: A comma-delimited list of statuses that disclosures should match.
        :param str ids: A comma-delimited list of IDs that disclosures should match.
        :return: DataLeaksDisclosuresResponsePayloadBody
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dataleaks_disclosures_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.dataleaks_disclosures_with_http_info(**kwargs)  # noqa: E501
            return data

    def dataleaks_disclosures_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of disclosures  # noqa: E501

        Returns a list of the disclosures in your account matching the given filters.  Required API key permissions: `DataLeaks` (select when creating API key in Account Settings)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dataleaks_disclosures_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime min_time: The minimum (non-inclusive) timestamp of a disclosure (RFC 3339 format).
        :param datetime max_time: The maximum (non-inclusive) timestamp of a disclosure (RFC 3339 format).
        :param str statuses: A comma-delimited list of statuses that disclosures should match.
        :param str ids: A comma-delimited list of IDs that disclosures should match.
        :return: DataLeaksDisclosuresResponsePayloadBody
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['min_time', 'max_time', 'statuses', 'ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dataleaks_disclosures" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'min_time' in params:
            query_params.append(('min_time', params['min_time']))  # noqa: E501
        if 'max_time' in params:
            query_params.append(('max_time', params['max_time']))  # noqa: E501
        if 'statuses' in params:
            query_params.append(('statuses', params['statuses']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/dataleaks/disclosures', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataLeaksDisclosuresResponsePayloadBody',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dataleaks_disclosures_update_status(self, disclosure_id, new_status, **kwargs):  # noqa: E501
        """Update the status of a disclosure  # noqa: E501

        Required API key permissions: `DataLeaks` (select when creating API key in Account Settings)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dataleaks_disclosures_update_status(disclosure_id, new_status, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int disclosure_id: The ID of the disclosure (required)
        :param str new_status: The new status for the disclosure (required)
        :param str user_email: The email address of the user changing the status (must have a Cyber Risk account with the \"Data Leaks\" role).
        :param str comment: A comment to accompany the status change, if required
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dataleaks_disclosures_update_status_with_http_info(disclosure_id, new_status, **kwargs)  # noqa: E501
        else:
            (data) = self.dataleaks_disclosures_update_status_with_http_info(disclosure_id, new_status, **kwargs)  # noqa: E501
            return data

    def dataleaks_disclosures_update_status_with_http_info(self, disclosure_id, new_status, **kwargs):  # noqa: E501
        """Update the status of a disclosure  # noqa: E501

        Required API key permissions: `DataLeaks` (select when creating API key in Account Settings)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dataleaks_disclosures_update_status_with_http_info(disclosure_id, new_status, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int disclosure_id: The ID of the disclosure (required)
        :param str new_status: The new status for the disclosure (required)
        :param str user_email: The email address of the user changing the status (must have a Cyber Risk account with the \"Data Leaks\" role).
        :param str comment: A comment to accompany the status change, if required
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['disclosure_id', 'new_status', 'user_email', 'comment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dataleaks_disclosures_update_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'disclosure_id' is set
        if self.api_client.client_side_validation and ('disclosure_id' not in params or
                                                       params['disclosure_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `disclosure_id` when calling `dataleaks_disclosures_update_status`")  # noqa: E501
        # verify the required parameter 'new_status' is set
        if self.api_client.client_side_validation and ('new_status' not in params or
                                                       params['new_status'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `new_status` when calling `dataleaks_disclosures_update_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'disclosure_id' in params:
            query_params.append(('disclosure_id', params['disclosure_id']))  # noqa: E501
        if 'new_status' in params:
            query_params.append(('new_status', params['new_status']))  # noqa: E501
        if 'user_email' in params:
            query_params.append(('user_email', params['user_email']))  # noqa: E501
        if 'comment' in params:
            query_params.append(('comment', params['comment']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/dataleaks/disclosures/status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
