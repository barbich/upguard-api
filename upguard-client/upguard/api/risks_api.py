# coding: utf-8

"""
    UpGuard CyberRisk API

    Access information from the CyberRisk platform programmatically using this API.  You can find or generate an API key to access this API in your CyberRisk Account Settings. Please authorize all requests by setting the \"Authorization\" header to your api key.  The base url for all public endpoints is https://cyber-risk.upguard.com/api/public  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from upguard.api_client import ApiClient


class RisksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def available_risks(self, **kwargs):  # noqa: E501
        """Get a list of available risks in the platform  # noqa: E501

        Returns a list of available risks in the UpGuard platform with detailed info. Please note this version of the endpoint has been deprecated, and v2 should be used instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.available_risks(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AvailableRisk
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.available_risks_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.available_risks_with_http_info(**kwargs)  # noqa: E501
            return data

    def available_risks_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of available risks in the platform  # noqa: E501

        Returns a list of available risks in the UpGuard platform with detailed info. Please note this version of the endpoint has been deprecated, and v2 should be used instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.available_risks_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AvailableRisk
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method available_risks" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/available_risks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AvailableRisk',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def available_risks_v2(self, **kwargs):  # noqa: E501
        """Get a list of available risks in the platform  # noqa: E501

        Returns a list of available risks in the UpGuard platform with detailed info.  Some risks in the platform are generic risks like \"exposed_service:*\". The values of some of the fields for these risks depends on the details of the risk, e.g. which particular service is exposed. As such these fields are omitted from the response.  To get the full details for a specific risk, e.g. \"exposed_service:FTP\", use the risk details endpoint which will return the full information for the particular service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.available_risks_v2(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AvailableRiskV2]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.available_risks_v2_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.available_risks_v2_with_http_info(**kwargs)  # noqa: E501
            return data

    def available_risks_v2_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of available risks in the platform  # noqa: E501

        Returns a list of available risks in the UpGuard platform with detailed info.  Some risks in the platform are generic risks like \"exposed_service:*\". The values of some of the fields for these risks depends on the details of the risk, e.g. which particular service is exposed. As such these fields are omitted from the response.  To get the full details for a specific risk, e.g. \"exposed_service:FTP\", use the risk details endpoint which will return the full information for the particular service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.available_risks_v2_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AvailableRiskV2]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method available_risks_v2" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/available_risks/v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AvailableRiskV2]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def org_risks_diff(self, start_date, **kwargs):  # noqa: E501
        """Get a list of risk changes for your account  # noqa: E501

        Returns a list of the risks introduced and risks resolved for domains or IPs between two dates.  Risks resolved are not computed for dates prior to 2018-11-01 00:00:00.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.org_risks_diff(start_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime start_date: The date to use as the starting point for determining risks introduced/resolved (RFC 3339 format). (required)
        :param datetime end_date: The date to use as the final state for determining risks introduced/resolved (RFC 3339 format). If not provided, the latest risks will be used.
        :return: RisksDiffResponsePayloadBody
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.org_risks_diff_with_http_info(start_date, **kwargs)  # noqa: E501
        else:
            (data) = self.org_risks_diff_with_http_info(start_date, **kwargs)  # noqa: E501
            return data

    def org_risks_diff_with_http_info(self, start_date, **kwargs):  # noqa: E501
        """Get a list of risk changes for your account  # noqa: E501

        Returns a list of the risks introduced and risks resolved for domains or IPs between two dates.  Risks resolved are not computed for dates prior to 2018-11-01 00:00:00.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.org_risks_diff_with_http_info(start_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime start_date: The date to use as the starting point for determining risks introduced/resolved (RFC 3339 format). (required)
        :param datetime end_date: The date to use as the final state for determining risks introduced/resolved (RFC 3339 format). If not provided, the latest risks will be used.
        :return: RisksDiffResponsePayloadBody
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method org_risks_diff" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_date' is set
        if self.api_client.client_side_validation and ('start_date' not in params or
                                                       params['start_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `start_date` when calling `org_risks_diff`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/risks/diff', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RisksDiffResponsePayloadBody',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def risk(self, risk_id, **kwargs):  # noqa: E501
        """Get details for a risk in the platform  # noqa: E501

        Returns the details for a risk.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.risk(risk_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str risk_id: ID of the risk to fetch details for (required)
        :return: AvailableRiskV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.risk_with_http_info(risk_id, **kwargs)  # noqa: E501
        else:
            (data) = self.risk_with_http_info(risk_id, **kwargs)  # noqa: E501
            return data

    def risk_with_http_info(self, risk_id, **kwargs):  # noqa: E501
        """Get details for a risk in the platform  # noqa: E501

        Returns the details for a risk.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.risk_with_http_info(risk_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str risk_id: ID of the risk to fetch details for (required)
        :return: AvailableRiskV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['risk_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method risk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'risk_id' is set
        if self.api_client.client_side_validation and ('risk_id' not in params or
                                                       params['risk_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `risk_id` when calling `risk`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'risk_id' in params:
            query_params.append(('risk_id', params['risk_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/available_risks/risk', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AvailableRiskV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def risks(self, **kwargs):  # noqa: E501
        """Get a list of active risks for your account  # noqa: E501

        Returns a list of risks that have been detected for your account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.risks(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str min_severity: Minimum severity for the risks
        :return: GetRisksV1RespBody
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.risks_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.risks_with_http_info(**kwargs)  # noqa: E501
            return data

    def risks_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of active risks for your account  # noqa: E501

        Returns a list of risks that have been detected for your account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.risks_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str min_severity: Minimum severity for the risks
        :return: GetRisksV1RespBody
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['min_severity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method risks" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'min_severity' in params:
            query_params.append(('min_severity', params['min_severity']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/risks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetRisksV1RespBody',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vendor_questionnaire_risks(self, **kwargs):  # noqa: E501
        """Get a list of questionnaire risks for one or more watched vendors or a specific questionnaire  # noqa: E501

        Returns a list of currently open questionnaire risks for one or more of an account's watched vendors. Please note this version of the endpoint has been deprecated, and v2 should be used instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendor_questionnaire_risks(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vendor_id: Restricts the questionnaire risks returned to a specific watched vendor by ID
        :param str primary_hostname: Restricts the questionnaire risks returned to a specific watched vendor by vendor primary hostname
        :param int questionnaire_id: Restricts the questionnaire risks returned to a specific questionnaire by ID
        :param str page_token: The token of the page to be returned. Will return the first page if left blank.
        :param int page_size: The number of risks to return per page. This Integer between 10 and 2000 defaults to 1000 if not supplied.
        :return: QuestionnaireRisksResponsePayloadBody
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vendor_questionnaire_risks_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.vendor_questionnaire_risks_with_http_info(**kwargs)  # noqa: E501
            return data

    def vendor_questionnaire_risks_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of questionnaire risks for one or more watched vendors or a specific questionnaire  # noqa: E501

        Returns a list of currently open questionnaire risks for one or more of an account's watched vendors. Please note this version of the endpoint has been deprecated, and v2 should be used instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendor_questionnaire_risks_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vendor_id: Restricts the questionnaire risks returned to a specific watched vendor by ID
        :param str primary_hostname: Restricts the questionnaire risks returned to a specific watched vendor by vendor primary hostname
        :param int questionnaire_id: Restricts the questionnaire risks returned to a specific questionnaire by ID
        :param str page_token: The token of the page to be returned. Will return the first page if left blank.
        :param int page_size: The number of risks to return per page. This Integer between 10 and 2000 defaults to 1000 if not supplied.
        :return: QuestionnaireRisksResponsePayloadBody
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vendor_id', 'primary_hostname', 'questionnaire_id', 'page_token', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vendor_questionnaire_risks" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'vendor_id' in params:
            query_params.append(('vendor_id', params['vendor_id']))  # noqa: E501
        if 'primary_hostname' in params:
            query_params.append(('primary_hostname', params['primary_hostname']))  # noqa: E501
        if 'questionnaire_id' in params:
            query_params.append(('questionnaire_id', params['questionnaire_id']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/risks/vendors/questionnaires', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuestionnaireRisksResponsePayloadBody',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vendor_questionnaire_risks_v2(self, **kwargs):  # noqa: E501
        """(V2) Get a list of questionnaire risks for one or more watched vendors or a specific questionnaire  # noqa: E501

        Returns a list of currently open questionnaire risks for one or more of an account's watched vendors, including information on whether waivers exist for each risk.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendor_questionnaire_risks_v2(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vendor_id: Restricts the questionnaire risks returned to a specific watched vendor by ID
        :param str primary_hostname: Restricts the questionnaire risks returned to a specific watched vendor by vendor primary hostname
        :param int questionnaire_id: Restricts the questionnaire risks returned to a specific questionnaire by ID
        :param str page_token: The token of the page to be returned. Will return the first page if left blank.
        :param int page_size: The number of risks to return per page. This Integer between 10 and 2000 defaults to 1000 if not supplied.
        :param bool ignore_waived_risks: Indicates that waived risks should not be returned in the risk set
        :return: QuestionnaireRisksResponsePayloadBodyV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vendor_questionnaire_risks_v2_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.vendor_questionnaire_risks_v2_with_http_info(**kwargs)  # noqa: E501
            return data

    def vendor_questionnaire_risks_v2_with_http_info(self, **kwargs):  # noqa: E501
        """(V2) Get a list of questionnaire risks for one or more watched vendors or a specific questionnaire  # noqa: E501

        Returns a list of currently open questionnaire risks for one or more of an account's watched vendors, including information on whether waivers exist for each risk.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendor_questionnaire_risks_v2_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int vendor_id: Restricts the questionnaire risks returned to a specific watched vendor by ID
        :param str primary_hostname: Restricts the questionnaire risks returned to a specific watched vendor by vendor primary hostname
        :param int questionnaire_id: Restricts the questionnaire risks returned to a specific questionnaire by ID
        :param str page_token: The token of the page to be returned. Will return the first page if left blank.
        :param int page_size: The number of risks to return per page. This Integer between 10 and 2000 defaults to 1000 if not supplied.
        :param bool ignore_waived_risks: Indicates that waived risks should not be returned in the risk set
        :return: QuestionnaireRisksResponsePayloadBodyV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vendor_id', 'primary_hostname', 'questionnaire_id', 'page_token', 'page_size', 'ignore_waived_risks']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vendor_questionnaire_risks_v2" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'vendor_id' in params:
            query_params.append(('vendor_id', params['vendor_id']))  # noqa: E501
        if 'primary_hostname' in params:
            query_params.append(('primary_hostname', params['primary_hostname']))  # noqa: E501
        if 'questionnaire_id' in params:
            query_params.append(('questionnaire_id', params['questionnaire_id']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'ignore_waived_risks' in params:
            query_params.append(('ignore_waived_risks', params['ignore_waived_risks']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/risks/vendors/questionnaires/v2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuestionnaireRisksResponsePayloadBodyV2',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vendor_risks(self, primary_hostname, **kwargs):  # noqa: E501
        """Get a list of active risks for a vendor  # noqa: E501

        Returns a list of risks that have been detected for a particular vendor.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendor_risks(primary_hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str primary_hostname: The primary hostname of the vendor to return risks for (required)
        :param str min_severity: Minimum severity for the risks
        :return: GetRisksV1RespBody
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vendor_risks_with_http_info(primary_hostname, **kwargs)  # noqa: E501
        else:
            (data) = self.vendor_risks_with_http_info(primary_hostname, **kwargs)  # noqa: E501
            return data

    def vendor_risks_with_http_info(self, primary_hostname, **kwargs):  # noqa: E501
        """Get a list of active risks for a vendor  # noqa: E501

        Returns a list of risks that have been detected for a particular vendor.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendor_risks_with_http_info(primary_hostname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str primary_hostname: The primary hostname of the vendor to return risks for (required)
        :param str min_severity: Minimum severity for the risks
        :return: GetRisksV1RespBody
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['primary_hostname', 'min_severity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vendor_risks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'primary_hostname' is set
        if self.api_client.client_side_validation and ('primary_hostname' not in params or
                                                       params['primary_hostname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `primary_hostname` when calling `vendor_risks`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'primary_hostname' in params:
            query_params.append(('primary_hostname', params['primary_hostname']))  # noqa: E501
        if 'min_severity' in params:
            query_params.append(('min_severity', params['min_severity']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/risks/vendors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetRisksV1RespBody',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vendor_risks_diff(self, vendor_primary_hostname, start_date, **kwargs):  # noqa: E501
        """Get a list of risk changes for a vendor  # noqa: E501

        Returns a list of the risks introduced and risks resolved for domains or IPs between two dates.  # The maximum allowed interval is 30 days  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendor_risks_diff(vendor_primary_hostname, start_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vendor_primary_hostname: The primary hostname for a vendor (required)
        :param datetime start_date: The date to use as the starting point for determining risks introduced/resolved (RFC 3339 format). (required)
        :param datetime end_date: The date to use as the final state for determining risks introduced/resolved (RFC 3339 format). If not provided, the latest risks will be used.
        :return: RisksDiffResponsePayloadBody
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vendor_risks_diff_with_http_info(vendor_primary_hostname, start_date, **kwargs)  # noqa: E501
        else:
            (data) = self.vendor_risks_diff_with_http_info(vendor_primary_hostname, start_date, **kwargs)  # noqa: E501
            return data

    def vendor_risks_diff_with_http_info(self, vendor_primary_hostname, start_date, **kwargs):  # noqa: E501
        """Get a list of risk changes for a vendor  # noqa: E501

        Returns a list of the risks introduced and risks resolved for domains or IPs between two dates.  # The maximum allowed interval is 30 days  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendor_risks_diff_with_http_info(vendor_primary_hostname, start_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str vendor_primary_hostname: The primary hostname for a vendor (required)
        :param datetime start_date: The date to use as the starting point for determining risks introduced/resolved (RFC 3339 format). (required)
        :param datetime end_date: The date to use as the final state for determining risks introduced/resolved (RFC 3339 format). If not provided, the latest risks will be used.
        :return: RisksDiffResponsePayloadBody
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vendor_primary_hostname', 'start_date', 'end_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vendor_risks_diff" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vendor_primary_hostname' is set
        if self.api_client.client_side_validation and ('vendor_primary_hostname' not in params or
                                                       params['vendor_primary_hostname'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `vendor_primary_hostname` when calling `vendor_risks_diff`")  # noqa: E501
        # verify the required parameter 'start_date' is set
        if self.api_client.client_side_validation and ('start_date' not in params or
                                                       params['start_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `start_date` when calling `vendor_risks_diff`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'vendor_primary_hostname' in params:
            query_params.append(('vendor_primary_hostname', params['vendor_primary_hostname']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/risks/vendors/diff', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RisksDiffResponsePayloadBody',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vendors_risks_diff(self, start_date, **kwargs):  # noqa: E501
        """Get a list of risk changes for monitored vendors  # noqa: E501

        Returns a list of the risks introduced and risks resolved for domains or IPs between two dates across your monitored vendors.  The maximum allowed interval is 30 days.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendors_risks_diff(start_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime start_date: The date to use as the starting point for determining risks introduced/resolved (RFC 3339 format). (required)
        :param datetime end_date: The date to use as the final state for determining risks introduced/resolved (RFC 3339 format). If not provided, the latest risks will be used.
        :param str page_token: The token of the page to be returned. Will return the first page if left blank.
        :param int page_size: The number of results to return per page. Valid values range from 10 to 200. Defaults to 20 if unset.
        :return: VendorsRisksDiffResponsePayloadBody
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vendors_risks_diff_with_http_info(start_date, **kwargs)  # noqa: E501
        else:
            (data) = self.vendors_risks_diff_with_http_info(start_date, **kwargs)  # noqa: E501
            return data

    def vendors_risks_diff_with_http_info(self, start_date, **kwargs):  # noqa: E501
        """Get a list of risk changes for monitored vendors  # noqa: E501

        Returns a list of the risks introduced and risks resolved for domains or IPs between two dates across your monitored vendors.  The maximum allowed interval is 30 days.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vendors_risks_diff_with_http_info(start_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime start_date: The date to use as the starting point for determining risks introduced/resolved (RFC 3339 format). (required)
        :param datetime end_date: The date to use as the final state for determining risks introduced/resolved (RFC 3339 format). If not provided, the latest risks will be used.
        :param str page_token: The token of the page to be returned. Will return the first page if left blank.
        :param int page_size: The number of results to return per page. Valid values range from 10 to 200. Defaults to 20 if unset.
        :return: VendorsRisksDiffResponsePayloadBody
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'page_token', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vendors_risks_diff" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_date' is set
        if self.api_client.client_side_validation and ('start_date' not in params or
                                                       params['start_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `start_date` when calling `vendors_risks_diff`")  # noqa: E501

        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] > 200):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `vendors_risks_diff`, must be a value less than or equal to `200`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] < 10):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `vendors_risks_diff`, must be a value greater than or equal to `10`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['API key in header']  # noqa: E501

        return self.api_client.call_api(
            '/risks/vendors/diffs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VendorsRisksDiffResponsePayloadBody',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
