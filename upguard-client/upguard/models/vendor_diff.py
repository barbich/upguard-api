# coding: utf-8

"""
    UpGuard CyberRisk API

    Access information from the CyberRisk platform programmatically using this API.  You can find or generate an API key to access this API in your CyberRisk Account Settings. Please authorize all requests by setting the \"Authorization\" header to your api key.  The base url for all public endpoints is https://cyber-risk.upguard.com/api/public  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from upguard.configuration import Configuration


class VendorDiff(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expected': 'str',
        'meta_value_a': 'str',
        'meta_value_b': 'str',
        'status_a': 'DiffStatus',
        'status_b': 'DiffStatus'
    }

    attribute_map = {
        'expected': 'expected',
        'meta_value_a': 'metaValueA',
        'meta_value_b': 'metaValueB',
        'status_a': 'statusA',
        'status_b': 'statusB'
    }

    def __init__(self, expected=None, meta_value_a=None, meta_value_b=None, status_a=None, status_b=None, _configuration=None):  # noqa: E501
        """VendorDiff - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._expected = None
        self._meta_value_a = None
        self._meta_value_b = None
        self._status_a = None
        self._status_b = None
        self.discriminator = None

        if expected is not None:
            self.expected = expected
        if meta_value_a is not None:
            self.meta_value_a = meta_value_a
        if meta_value_b is not None:
            self.meta_value_b = meta_value_b
        if status_a is not None:
            self.status_a = status_a
        if status_b is not None:
            self.status_b = status_b

    @property
    def expected(self):
        """Gets the expected of this VendorDiff.  # noqa: E501

        The expected status  # noqa: E501

        :return: The expected of this VendorDiff.  # noqa: E501
        :rtype: str
        """
        return self._expected

    @expected.setter
    def expected(self, expected):
        """Sets the expected of this VendorDiff.

        The expected status  # noqa: E501

        :param expected: The expected of this VendorDiff.  # noqa: E501
        :type: str
        """

        self._expected = expected

    @property
    def meta_value_a(self):
        """Gets the meta_value_a of this VendorDiff.  # noqa: E501

        Metadata for the result of the first check  # noqa: E501

        :return: The meta_value_a of this VendorDiff.  # noqa: E501
        :rtype: str
        """
        return self._meta_value_a

    @meta_value_a.setter
    def meta_value_a(self, meta_value_a):
        """Sets the meta_value_a of this VendorDiff.

        Metadata for the result of the first check  # noqa: E501

        :param meta_value_a: The meta_value_a of this VendorDiff.  # noqa: E501
        :type: str
        """

        self._meta_value_a = meta_value_a

    @property
    def meta_value_b(self):
        """Gets the meta_value_b of this VendorDiff.  # noqa: E501

        Metadata for the result of the second check  # noqa: E501

        :return: The meta_value_b of this VendorDiff.  # noqa: E501
        :rtype: str
        """
        return self._meta_value_b

    @meta_value_b.setter
    def meta_value_b(self, meta_value_b):
        """Sets the meta_value_b of this VendorDiff.

        Metadata for the result of the second check  # noqa: E501

        :param meta_value_b: The meta_value_b of this VendorDiff.  # noqa: E501
        :type: str
        """

        self._meta_value_b = meta_value_b

    @property
    def status_a(self):
        """Gets the status_a of this VendorDiff.  # noqa: E501


        :return: The status_a of this VendorDiff.  # noqa: E501
        :rtype: DiffStatus
        """
        return self._status_a

    @status_a.setter
    def status_a(self, status_a):
        """Sets the status_a of this VendorDiff.


        :param status_a: The status_a of this VendorDiff.  # noqa: E501
        :type: DiffStatus
        """

        self._status_a = status_a

    @property
    def status_b(self):
        """Gets the status_b of this VendorDiff.  # noqa: E501


        :return: The status_b of this VendorDiff.  # noqa: E501
        :rtype: DiffStatus
        """
        return self._status_b

    @status_b.setter
    def status_b(self, status_b):
        """Sets the status_b of this VendorDiff.


        :param status_b: The status_b of this VendorDiff.  # noqa: E501
        :type: DiffStatus
        """

        self._status_b = status_b

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VendorDiff, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VendorDiff):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VendorDiff):
            return True

        return self.to_dict() != other.to_dict()
