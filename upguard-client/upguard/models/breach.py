# coding: utf-8

"""
    UpGuard CyberRisk API

    Access information from the CyberRisk platform programmatically using this API.  You can find or generate an API key to access this API in your CyberRisk Account Settings. Please authorize all requests by setting the \"Authorization\" header to your api key.  The base url for all public endpoints is https://cyber-risk.upguard.com/api/public  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from upguard.configuration import Configuration


class Breach(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_occurred': 'datetime',
        'date_published': 'datetime',
        'description': 'str',
        'domain': 'str',
        'exposed_data_classes': 'list[str]',
        'id': 'int',
        'name': 'str',
        'title': 'str',
        'total_exposures': 'int'
    }

    attribute_map = {
        'date_occurred': 'date_occurred',
        'date_published': 'date_published',
        'description': 'description',
        'domain': 'domain',
        'exposed_data_classes': 'exposed_data_classes',
        'id': 'id',
        'name': 'name',
        'title': 'title',
        'total_exposures': 'total_exposures'
    }

    def __init__(self, date_occurred=None, date_published=None, description=None, domain=None, exposed_data_classes=None, id=None, name=None, title=None, total_exposures=None, _configuration=None):  # noqa: E501
        """Breach - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._date_occurred = None
        self._date_published = None
        self._description = None
        self._domain = None
        self._exposed_data_classes = None
        self._id = None
        self._name = None
        self._title = None
        self._total_exposures = None
        self.discriminator = None

        if date_occurred is not None:
            self.date_occurred = date_occurred
        if date_published is not None:
            self.date_published = date_published
        if description is not None:
            self.description = description
        if domain is not None:
            self.domain = domain
        if exposed_data_classes is not None:
            self.exposed_data_classes = exposed_data_classes
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if title is not None:
            self.title = title
        if total_exposures is not None:
            self.total_exposures = total_exposures

    @property
    def date_occurred(self):
        """Gets the date_occurred of this Breach.  # noqa: E501

        The date the breach occurred (ISO 3339 format)  # noqa: E501

        :return: The date_occurred of this Breach.  # noqa: E501
        :rtype: datetime
        """
        return self._date_occurred

    @date_occurred.setter
    def date_occurred(self, date_occurred):
        """Sets the date_occurred of this Breach.

        The date the breach occurred (ISO 3339 format)  # noqa: E501

        :param date_occurred: The date_occurred of this Breach.  # noqa: E501
        :type: datetime
        """

        self._date_occurred = date_occurred

    @property
    def date_published(self):
        """Gets the date_published of this Breach.  # noqa: E501

        The date the breach was published (ISO 3339 format)  # noqa: E501

        :return: The date_published of this Breach.  # noqa: E501
        :rtype: datetime
        """
        return self._date_published

    @date_published.setter
    def date_published(self, date_published):
        """Sets the date_published of this Breach.

        The date the breach was published (ISO 3339 format)  # noqa: E501

        :param date_published: The date_published of this Breach.  # noqa: E501
        :type: datetime
        """

        self._date_published = date_published

    @property
    def description(self):
        """Gets the description of this Breach.  # noqa: E501

        The description of the breach  # noqa: E501

        :return: The description of this Breach.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Breach.

        The description of the breach  # noqa: E501

        :param description: The description of this Breach.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def domain(self):
        """Gets the domain of this Breach.  # noqa: E501

        The domain of the breach  # noqa: E501

        :return: The domain of this Breach.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Breach.

        The domain of the breach  # noqa: E501

        :param domain: The domain of this Breach.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def exposed_data_classes(self):
        """Gets the exposed_data_classes of this Breach.  # noqa: E501

        The classes of data exposed in this breach eg. \"Passwords\", \"Usernames\", \"Email addresses\", \"Social security numbers\", \"Banking PINs\", \"Credit cards\".  # noqa: E501

        :return: The exposed_data_classes of this Breach.  # noqa: E501
        :rtype: list[str]
        """
        return self._exposed_data_classes

    @exposed_data_classes.setter
    def exposed_data_classes(self, exposed_data_classes):
        """Sets the exposed_data_classes of this Breach.

        The classes of data exposed in this breach eg. \"Passwords\", \"Usernames\", \"Email addresses\", \"Social security numbers\", \"Banking PINs\", \"Credit cards\".  # noqa: E501

        :param exposed_data_classes: The exposed_data_classes of this Breach.  # noqa: E501
        :type: list[str]
        """

        self._exposed_data_classes = exposed_data_classes

    @property
    def id(self):
        """Gets the id of this Breach.  # noqa: E501

        The internal id of the breach  # noqa: E501

        :return: The id of this Breach.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Breach.

        The internal id of the breach  # noqa: E501

        :param id: The id of this Breach.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Breach.  # noqa: E501

        The name of the breach  # noqa: E501

        :return: The name of this Breach.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Breach.

        The name of the breach  # noqa: E501

        :param name: The name of this Breach.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def title(self):
        """Gets the title of this Breach.  # noqa: E501

        The title of the breach  # noqa: E501

        :return: The title of this Breach.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Breach.

        The title of the breach  # noqa: E501

        :param title: The title of this Breach.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def total_exposures(self):
        """Gets the total_exposures of this Breach.  # noqa: E501

        The total number of identities in the breach  # noqa: E501

        :return: The total_exposures of this Breach.  # noqa: E501
        :rtype: int
        """
        return self._total_exposures

    @total_exposures.setter
    def total_exposures(self, total_exposures):
        """Sets the total_exposures of this Breach.

        The total number of identities in the breach  # noqa: E501

        :param total_exposures: The total_exposures of this Breach.  # noqa: E501
        :type: int
        """

        self._total_exposures = total_exposures

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Breach, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Breach):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Breach):
            return True

        return self.to_dict() != other.to_dict()
