# coding: utf-8

"""
    UpGuard CyberRisk API

    Access information from the CyberRisk platform programmatically using this API.  You can find or generate an API key to access this API in your CyberRisk Account Settings. Please authorize all requests by setting the \"Authorization\" header to your api key.  The base url for all public endpoints is https://cyber-risk.upguard.com/api/public  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from upguard.configuration import Configuration


class Questionnaire(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'archived': 'bool',
        'id': 'int',
        'in_remediation': 'bool',
        'name': 'str',
        'returned_at': 'datetime',
        'sent_at': 'datetime',
        'status': 'str'
    }

    attribute_map = {
        'archived': 'archived',
        'id': 'id',
        'in_remediation': 'in_remediation',
        'name': 'name',
        'returned_at': 'returned_at',
        'sent_at': 'sent_at',
        'status': 'status'
    }

    def __init__(self, archived=None, id=None, in_remediation=None, name=None, returned_at=None, sent_at=None, status=None, _configuration=None):  # noqa: E501
        """Questionnaire - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._archived = None
        self._id = None
        self._in_remediation = None
        self._name = None
        self._returned_at = None
        self._sent_at = None
        self._status = None
        self.discriminator = None

        if archived is not None:
            self.archived = archived
        if id is not None:
            self.id = id
        if in_remediation is not None:
            self.in_remediation = in_remediation
        if name is not None:
            self.name = name
        if returned_at is not None:
            self.returned_at = returned_at
        if sent_at is not None:
            self.sent_at = sent_at
        if status is not None:
            self.status = status

    @property
    def archived(self):
        """Gets the archived of this Questionnaire.  # noqa: E501

        Flag indicating whether the questionnaire has been archived  # noqa: E501

        :return: The archived of this Questionnaire.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this Questionnaire.

        Flag indicating whether the questionnaire has been archived  # noqa: E501

        :param archived: The archived of this Questionnaire.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    @property
    def id(self):
        """Gets the id of this Questionnaire.  # noqa: E501

        The id of the questionnaire.  # noqa: E501

        :return: The id of this Questionnaire.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Questionnaire.

        The id of the questionnaire.  # noqa: E501

        :param id: The id of this Questionnaire.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def in_remediation(self):
        """Gets the in_remediation of this Questionnaire.  # noqa: E501

        Flag indicating whether there are risks under remediation in this questionnaire  # noqa: E501

        :return: The in_remediation of this Questionnaire.  # noqa: E501
        :rtype: bool
        """
        return self._in_remediation

    @in_remediation.setter
    def in_remediation(self, in_remediation):
        """Sets the in_remediation of this Questionnaire.

        Flag indicating whether there are risks under remediation in this questionnaire  # noqa: E501

        :param in_remediation: The in_remediation of this Questionnaire.  # noqa: E501
        :type: bool
        """

        self._in_remediation = in_remediation

    @property
    def name(self):
        """Gets the name of this Questionnaire.  # noqa: E501

        The name of the questionnaire.  # noqa: E501

        :return: The name of this Questionnaire.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Questionnaire.

        The name of the questionnaire.  # noqa: E501

        :param name: The name of this Questionnaire.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def returned_at(self):
        """Gets the returned_at of this Questionnaire.  # noqa: E501

        The datetime that the questionnaire was returned by the vendor. This field will be null if the questionnaire has not been returned.  # noqa: E501

        :return: The returned_at of this Questionnaire.  # noqa: E501
        :rtype: datetime
        """
        return self._returned_at

    @returned_at.setter
    def returned_at(self, returned_at):
        """Sets the returned_at of this Questionnaire.

        The datetime that the questionnaire was returned by the vendor. This field will be null if the questionnaire has not been returned.  # noqa: E501

        :param returned_at: The returned_at of this Questionnaire.  # noqa: E501
        :type: datetime
        """

        self._returned_at = returned_at

    @property
    def sent_at(self):
        """Gets the sent_at of this Questionnaire.  # noqa: E501

        The datetime that the questionnaire was sent.  # noqa: E501

        :return: The sent_at of this Questionnaire.  # noqa: E501
        :rtype: datetime
        """
        return self._sent_at

    @sent_at.setter
    def sent_at(self, sent_at):
        """Sets the sent_at of this Questionnaire.

        The datetime that the questionnaire was sent.  # noqa: E501

        :param sent_at: The sent_at of this Questionnaire.  # noqa: E501
        :type: datetime
        """

        self._sent_at = sent_at

    @property
    def status(self):
        """Gets the status of this Questionnaire.  # noqa: E501

        The current status of the questionnaire.  # noqa: E501

        :return: The status of this Questionnaire.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Questionnaire.

        The current status of the questionnaire.  # noqa: E501

        :param status: The status of this Questionnaire.  # noqa: E501
        :type: str
        """
        allowed_values = ["sent", "opened", "returned", "inreview", "complete", "cancelled", "published"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Questionnaire, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Questionnaire):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Questionnaire):
            return True

        return self.to_dict() != other.to_dict()
