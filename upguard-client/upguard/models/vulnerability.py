# coding: utf-8

"""
    UpGuard CyberRisk API

    Access information from the CyberRisk platform programmatically using this API.  You can find or generate an API key to access this API in your CyberRisk Account Settings. Please authorize all requests by setting the \"Authorization\" header to your api key.  The base url for all public endpoints is https://cyber-risk.upguard.com/api/public  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from upguard.configuration import Configuration


class Vulnerability(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpes': 'list[str]',
        'created_at': 'datetime',
        'cve': 'Cve',
        'hostname': 'str',
        'ip_addresses': 'list[str]',
        'verified': 'bool'
    }

    attribute_map = {
        'cpes': 'cpes',
        'created_at': 'created_at',
        'cve': 'cve',
        'hostname': 'hostname',
        'ip_addresses': 'ip_addresses',
        'verified': 'verified'
    }

    def __init__(self, cpes=None, created_at=None, cve=None, hostname=None, ip_addresses=None, verified=None, _configuration=None):  # noqa: E501
        """Vulnerability - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cpes = None
        self._created_at = None
        self._cve = None
        self._hostname = None
        self._ip_addresses = None
        self._verified = None
        self.discriminator = None

        if cpes is not None:
            self.cpes = cpes
        if created_at is not None:
            self.created_at = created_at
        if cve is not None:
            self.cve = cve
        if hostname is not None:
            self.hostname = hostname
        if ip_addresses is not None:
            self.ip_addresses = ip_addresses
        if verified is not None:
            self.verified = verified

    @property
    def cpes(self):
        """Gets the cpes of this Vulnerability.  # noqa: E501

        The CPEs (Common Platform Enumeration) of the vulnerability  # noqa: E501

        :return: The cpes of this Vulnerability.  # noqa: E501
        :rtype: list[str]
        """
        return self._cpes

    @cpes.setter
    def cpes(self, cpes):
        """Sets the cpes of this Vulnerability.

        The CPEs (Common Platform Enumeration) of the vulnerability  # noqa: E501

        :param cpes: The cpes of this Vulnerability.  # noqa: E501
        :type: list[str]
        """

        self._cpes = cpes

    @property
    def created_at(self):
        """Gets the created_at of this Vulnerability.  # noqa: E501

        The date the potential vulnerability was detected (ISO 3339 format)  # noqa: E501

        :return: The created_at of this Vulnerability.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Vulnerability.

        The date the potential vulnerability was detected (ISO 3339 format)  # noqa: E501

        :param created_at: The created_at of this Vulnerability.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def cve(self):
        """Gets the cve of this Vulnerability.  # noqa: E501


        :return: The cve of this Vulnerability.  # noqa: E501
        :rtype: Cve
        """
        return self._cve

    @cve.setter
    def cve(self, cve):
        """Sets the cve of this Vulnerability.


        :param cve: The cve of this Vulnerability.  # noqa: E501
        :type: Cve
        """

        self._cve = cve

    @property
    def hostname(self):
        """Gets the hostname of this Vulnerability.  # noqa: E501

        The hostname where the potential vulnerability was detected  # noqa: E501

        :return: The hostname of this Vulnerability.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this Vulnerability.

        The hostname where the potential vulnerability was detected  # noqa: E501

        :param hostname: The hostname of this Vulnerability.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this Vulnerability.  # noqa: E501

        The IP addresses where the potential vulnerability was detected  # noqa: E501

        :return: The ip_addresses of this Vulnerability.  # noqa: E501
        :rtype: list[str]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this Vulnerability.

        The IP addresses where the potential vulnerability was detected  # noqa: E501

        :param ip_addresses: The ip_addresses of this Vulnerability.  # noqa: E501
        :type: list[str]
        """

        self._ip_addresses = ip_addresses

    @property
    def verified(self):
        """Gets the verified of this Vulnerability.  # noqa: E501

        Indicates if the vulnerability has been tested and verified as part of an automated scan  # noqa: E501

        :return: The verified of this Vulnerability.  # noqa: E501
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this Vulnerability.

        Indicates if the vulnerability has been tested and verified as part of an automated scan  # noqa: E501

        :param verified: The verified of this Vulnerability.  # noqa: E501
        :type: bool
        """

        self._verified = verified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Vulnerability, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vulnerability):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Vulnerability):
            return True

        return self.to_dict() != other.to_dict()
