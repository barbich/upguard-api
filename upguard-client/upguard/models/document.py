# coding: utf-8

"""
    UpGuard CyberRisk API

    Access information from the CyberRisk platform programmatically using this API.  You can find or generate an API key to access this API in your CyberRisk Account Settings. Please authorize all requests by setting the \"Authorization\" header to your api key.  The base url for all public endpoints is https://cyber-risk.upguard.com/api/public  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from upguard.configuration import Configuration


class Document(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'file_name': 'str',
        'id': 'int',
        'uploaded_at': 'datetime'
    }

    attribute_map = {
        'description': 'description',
        'file_name': 'file_name',
        'id': 'id',
        'uploaded_at': 'uploaded_at'
    }

    def __init__(self, description=None, file_name=None, id=None, uploaded_at=None, _configuration=None):  # noqa: E501
        """Document - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._description = None
        self._file_name = None
        self._id = None
        self._uploaded_at = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if file_name is not None:
            self.file_name = file_name
        if id is not None:
            self.id = id
        if uploaded_at is not None:
            self.uploaded_at = uploaded_at

    @property
    def description(self):
        """Gets the description of this Document.  # noqa: E501

        The description of the document.  # noqa: E501

        :return: The description of this Document.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Document.

        The description of the document.  # noqa: E501

        :param description: The description of this Document.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def file_name(self):
        """Gets the file_name of this Document.  # noqa: E501

        The file name of the uploaded document.  # noqa: E501

        :return: The file_name of this Document.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this Document.

        The file name of the uploaded document.  # noqa: E501

        :param file_name: The file_name of this Document.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def id(self):
        """Gets the id of this Document.  # noqa: E501

        The document ID.  # noqa: E501

        :return: The id of this Document.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Document.

        The document ID.  # noqa: E501

        :param id: The id of this Document.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uploaded_at(self):
        """Gets the uploaded_at of this Document.  # noqa: E501

        When the document was uploaded.  # noqa: E501

        :return: The uploaded_at of this Document.  # noqa: E501
        :rtype: datetime
        """
        return self._uploaded_at

    @uploaded_at.setter
    def uploaded_at(self, uploaded_at):
        """Sets the uploaded_at of this Document.

        When the document was uploaded.  # noqa: E501

        :param uploaded_at: The uploaded_at of this Document.  # noqa: E501
        :type: datetime
        """

        self._uploaded_at = uploaded_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Document, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Document):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Document):
            return True

        return self.to_dict() != other.to_dict()
