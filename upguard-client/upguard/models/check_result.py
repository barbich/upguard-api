# coding: utf-8

"""
    UpGuard CyberRisk API

    Access information from the CyberRisk platform programmatically using this API.  You can find or generate an API key to access this API in your CyberRisk Account Settings. Please authorize all requests by setting the \"Authorization\" header to your api key.  The base url for all public endpoints is https://cyber-risk.upguard.com/api/public  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from upguard.configuration import Configuration


class CheckResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actual': 'list[ModelProperty]',
        'category': 'Category',
        'checked_at': 'datetime',
        'description': 'str',
        'expected': 'list[ModelProperty]',
        'id': 'str',
        '_pass': 'bool',
        'risk_subtype': 'str',
        'risk_type': 'str',
        'severity': 'Severity',
        'severity_name': 'str',
        'sources': 'list[str]',
        'title': 'str'
    }

    attribute_map = {
        'actual': 'actual',
        'category': 'category',
        'checked_at': 'checked_at',
        'description': 'description',
        'expected': 'expected',
        'id': 'id',
        '_pass': 'pass',
        'risk_subtype': 'riskSubtype',
        'risk_type': 'riskType',
        'severity': 'severity',
        'severity_name': 'severityName',
        'sources': 'sources',
        'title': 'title'
    }

    def __init__(self, actual=None, category=None, checked_at=None, description=None, expected=None, id=None, _pass=None, risk_subtype=None, risk_type=None, severity=None, severity_name=None, sources=None, title=None, _configuration=None):  # noqa: E501
        """CheckResult - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._actual = None
        self._category = None
        self._checked_at = None
        self._description = None
        self._expected = None
        self._id = None
        self.__pass = None
        self._risk_subtype = None
        self._risk_type = None
        self._severity = None
        self._severity_name = None
        self._sources = None
        self._title = None
        self.discriminator = None

        if actual is not None:
            self.actual = actual
        if category is not None:
            self.category = category
        if checked_at is not None:
            self.checked_at = checked_at
        if description is not None:
            self.description = description
        if expected is not None:
            self.expected = expected
        if id is not None:
            self.id = id
        if _pass is not None:
            self._pass = _pass
        if risk_subtype is not None:
            self.risk_subtype = risk_subtype
        if risk_type is not None:
            self.risk_type = risk_type
        if severity is not None:
            self.severity = severity
        if severity_name is not None:
            self.severity_name = severity_name
        if sources is not None:
            self.sources = sources
        if title is not None:
            self.title = title

    @property
    def actual(self):
        """Gets the actual of this CheckResult.  # noqa: E501

        The found properties of the check  # noqa: E501

        :return: The actual of this CheckResult.  # noqa: E501
        :rtype: list[ModelProperty]
        """
        return self._actual

    @actual.setter
    def actual(self, actual):
        """Sets the actual of this CheckResult.

        The found properties of the check  # noqa: E501

        :param actual: The actual of this CheckResult.  # noqa: E501
        :type: list[ModelProperty]
        """

        self._actual = actual

    @property
    def category(self):
        """Gets the category of this CheckResult.  # noqa: E501


        :return: The category of this CheckResult.  # noqa: E501
        :rtype: Category
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CheckResult.


        :param category: The category of this CheckResult.  # noqa: E501
        :type: Category
        """

        self._category = category

    @property
    def checked_at(self):
        """Gets the checked_at of this CheckResult.  # noqa: E501

        The time the check was performed in RFC3339 format  # noqa: E501

        :return: The checked_at of this CheckResult.  # noqa: E501
        :rtype: datetime
        """
        return self._checked_at

    @checked_at.setter
    def checked_at(self, checked_at):
        """Sets the checked_at of this CheckResult.

        The time the check was performed in RFC3339 format  # noqa: E501

        :param checked_at: The checked_at of this CheckResult.  # noqa: E501
        :type: datetime
        """

        self._checked_at = checked_at

    @property
    def description(self):
        """Gets the description of this CheckResult.  # noqa: E501

        The description of the check performed  # noqa: E501

        :return: The description of this CheckResult.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CheckResult.

        The description of the check performed  # noqa: E501

        :param description: The description of this CheckResult.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def expected(self):
        """Gets the expected of this CheckResult.  # noqa: E501

        The expected properties of the check  # noqa: E501

        :return: The expected of this CheckResult.  # noqa: E501
        :rtype: list[ModelProperty]
        """
        return self._expected

    @expected.setter
    def expected(self, expected):
        """Sets the expected of this CheckResult.

        The expected properties of the check  # noqa: E501

        :param expected: The expected of this CheckResult.  # noqa: E501
        :type: list[ModelProperty]
        """

        self._expected = expected

    @property
    def id(self):
        """Gets the id of this CheckResult.  # noqa: E501

        The ID of the check  # noqa: E501

        :return: The id of this CheckResult.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CheckResult.

        The ID of the check  # noqa: E501

        :param id: The id of this CheckResult.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def _pass(self):
        """Gets the _pass of this CheckResult.  # noqa: E501

        Flag indicating whether the check passed or not  # noqa: E501

        :return: The _pass of this CheckResult.  # noqa: E501
        :rtype: bool
        """
        return self.__pass

    @_pass.setter
    def _pass(self, _pass):
        """Sets the _pass of this CheckResult.

        Flag indicating whether the check passed or not  # noqa: E501

        :param _pass: The _pass of this CheckResult.  # noqa: E501
        :type: bool
        """

        self.__pass = _pass

    @property
    def risk_subtype(self):
        """Gets the risk_subtype of this CheckResult.  # noqa: E501

        The subtype of the risk, e.g. the subtype of the verified_vuln:CVE-2021-34473 is CVE-2021-34473. This field will be empty if the risk has no subtype, e.g. for wp_version_exposed, or for generic risks like verified_vuln:* where the subtype is only determined when the full risk is specified.  # noqa: E501

        :return: The risk_subtype of this CheckResult.  # noqa: E501
        :rtype: str
        """
        return self._risk_subtype

    @risk_subtype.setter
    def risk_subtype(self, risk_subtype):
        """Sets the risk_subtype of this CheckResult.

        The subtype of the risk, e.g. the subtype of the verified_vuln:CVE-2021-34473 is CVE-2021-34473. This field will be empty if the risk has no subtype, e.g. for wp_version_exposed, or for generic risks like verified_vuln:* where the subtype is only determined when the full risk is specified.  # noqa: E501

        :param risk_subtype: The risk_subtype of this CheckResult.  # noqa: E501
        :type: str
        """

        self._risk_subtype = risk_subtype

    @property
    def risk_type(self):
        """Gets the risk_type of this CheckResult.  # noqa: E501

        The type of the risk, e.g. the type of the verified_vuln:CVE-2021-34473 is verified_vuln  # noqa: E501

        :return: The risk_type of this CheckResult.  # noqa: E501
        :rtype: str
        """
        return self._risk_type

    @risk_type.setter
    def risk_type(self, risk_type):
        """Sets the risk_type of this CheckResult.

        The type of the risk, e.g. the type of the verified_vuln:CVE-2021-34473 is verified_vuln  # noqa: E501

        :param risk_type: The risk_type of this CheckResult.  # noqa: E501
        :type: str
        """

        self._risk_type = risk_type

    @property
    def severity(self):
        """Gets the severity of this CheckResult.  # noqa: E501


        :return: The severity of this CheckResult.  # noqa: E501
        :rtype: Severity
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this CheckResult.


        :param severity: The severity of this CheckResult.  # noqa: E501
        :type: Severity
        """

        self._severity = severity

    @property
    def severity_name(self):
        """Gets the severity_name of this CheckResult.  # noqa: E501

        The severity fo the risk in human-readable form  # noqa: E501

        :return: The severity_name of this CheckResult.  # noqa: E501
        :rtype: str
        """
        return self._severity_name

    @severity_name.setter
    def severity_name(self, severity_name):
        """Sets the severity_name of this CheckResult.

        The severity fo the risk in human-readable form  # noqa: E501

        :param severity_name: The severity_name of this CheckResult.  # noqa: E501
        :type: str
        """
        allowed_values = ["pass", "info", "low", "medium", "high", "critical"]  # noqa: E501
        if (self._configuration.client_side_validation and
                severity_name not in allowed_values):
            raise ValueError(
                "Invalid value for `severity_name` ({0}), must be one of {1}"  # noqa: E501
                .format(severity_name, allowed_values)
            )

        self._severity_name = severity_name

    @property
    def sources(self):
        """Gets the sources of this CheckResult.  # noqa: E501

        Sources contains information about the source of a check e.g. the IP addresses it was found on, or a domain name  # noqa: E501

        :return: The sources of this CheckResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this CheckResult.

        Sources contains information about the source of a check e.g. the IP addresses it was found on, or a domain name  # noqa: E501

        :param sources: The sources of this CheckResult.  # noqa: E501
        :type: list[str]
        """

        self._sources = sources

    @property
    def title(self):
        """Gets the title of this CheckResult.  # noqa: E501

        The title of the check  # noqa: E501

        :return: The title of this CheckResult.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CheckResult.

        The title of the check  # noqa: E501

        :param title: The title of this CheckResult.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CheckResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CheckResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CheckResult):
            return True

        return self.to_dict() != other.to_dict()
