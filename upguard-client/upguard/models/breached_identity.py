# coding: utf-8

"""
    UpGuard CyberRisk API

    Access information from the CyberRisk platform programmatically using this API.  You can find or generate an API key to access this API in your CyberRisk Account Settings. Please authorize all requests by setting the \"Authorization\" header to your api key.  The base url for all public endpoints is https://cyber-risk.upguard.com/api/public  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from upguard.configuration import Configuration


class BreachedIdentity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'breach_ids': 'list[int]',
        'domain': 'str',
        'id': 'int',
        'last_breach_date': 'datetime',
        'name': 'str',
        'num_breaches': 'int'
    }

    attribute_map = {
        'breach_ids': 'breach_ids',
        'domain': 'domain',
        'id': 'id',
        'last_breach_date': 'last_breach_date',
        'name': 'name',
        'num_breaches': 'num_breaches'
    }

    def __init__(self, breach_ids=None, domain=None, id=None, last_breach_date=None, name=None, num_breaches=None, _configuration=None):  # noqa: E501
        """BreachedIdentity - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._breach_ids = None
        self._domain = None
        self._id = None
        self._last_breach_date = None
        self._name = None
        self._num_breaches = None
        self.discriminator = None

        if breach_ids is not None:
            self.breach_ids = breach_ids
        if domain is not None:
            self.domain = domain
        if id is not None:
            self.id = id
        if last_breach_date is not None:
            self.last_breach_date = last_breach_date
        if name is not None:
            self.name = name
        if num_breaches is not None:
            self.num_breaches = num_breaches

    @property
    def breach_ids(self):
        """Gets the breach_ids of this BreachedIdentity.  # noqa: E501

        The IDs of the breaches the identity is associated with  # noqa: E501

        :return: The breach_ids of this BreachedIdentity.  # noqa: E501
        :rtype: list[int]
        """
        return self._breach_ids

    @breach_ids.setter
    def breach_ids(self, breach_ids):
        """Sets the breach_ids of this BreachedIdentity.

        The IDs of the breaches the identity is associated with  # noqa: E501

        :param breach_ids: The breach_ids of this BreachedIdentity.  # noqa: E501
        :type: list[int]
        """

        self._breach_ids = breach_ids

    @property
    def domain(self):
        """Gets the domain of this BreachedIdentity.  # noqa: E501

        The breached identity domain  # noqa: E501

        :return: The domain of this BreachedIdentity.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this BreachedIdentity.

        The breached identity domain  # noqa: E501

        :param domain: The domain of this BreachedIdentity.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def id(self):
        """Gets the id of this BreachedIdentity.  # noqa: E501

        The internal id of the identity  # noqa: E501

        :return: The id of this BreachedIdentity.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BreachedIdentity.

        The internal id of the identity  # noqa: E501

        :param id: The id of this BreachedIdentity.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def last_breach_date(self):
        """Gets the last_breach_date of this BreachedIdentity.  # noqa: E501

        The date of the most recent breach (RFC 3339 format)  # noqa: E501

        :return: The last_breach_date of this BreachedIdentity.  # noqa: E501
        :rtype: datetime
        """
        return self._last_breach_date

    @last_breach_date.setter
    def last_breach_date(self, last_breach_date):
        """Sets the last_breach_date of this BreachedIdentity.

        The date of the most recent breach (RFC 3339 format)  # noqa: E501

        :param last_breach_date: The last_breach_date of this BreachedIdentity.  # noqa: E501
        :type: datetime
        """

        self._last_breach_date = last_breach_date

    @property
    def name(self):
        """Gets the name of this BreachedIdentity.  # noqa: E501

        The breached identity name  # noqa: E501

        :return: The name of this BreachedIdentity.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BreachedIdentity.

        The breached identity name  # noqa: E501

        :param name: The name of this BreachedIdentity.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def num_breaches(self):
        """Gets the num_breaches of this BreachedIdentity.  # noqa: E501

        The total number of breaches the identity has been in  # noqa: E501

        :return: The num_breaches of this BreachedIdentity.  # noqa: E501
        :rtype: int
        """
        return self._num_breaches

    @num_breaches.setter
    def num_breaches(self, num_breaches):
        """Sets the num_breaches of this BreachedIdentity.

        The total number of breaches the identity has been in  # noqa: E501

        :param num_breaches: The num_breaches of this BreachedIdentity.  # noqa: E501
        :type: int
        """

        self._num_breaches = num_breaches

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BreachedIdentity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BreachedIdentity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BreachedIdentity):
            return True

        return self.to_dict() != other.to_dict()
