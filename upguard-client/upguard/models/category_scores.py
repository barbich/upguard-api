# coding: utf-8

"""
    UpGuard CyberRisk API

    Access information from the CyberRisk platform programmatically using this API.  You can find or generate an API key to access this API in your CyberRisk Account Settings. Please authorize all requests by setting the \"Authorization\" header to your api key.  The base url for all public endpoints is https://cyber-risk.upguard.com/api/public  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from upguard.configuration import Configuration


class CategoryScores(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'brand_protection': 'int',
        'email_security': 'int',
        'network_security': 'int',
        'phishing': 'int',
        'website_security': 'int'
    }

    attribute_map = {
        'brand_protection': 'brandProtection',
        'email_security': 'emailSecurity',
        'network_security': 'networkSecurity',
        'phishing': 'phishing',
        'website_security': 'websiteSecurity'
    }

    def __init__(self, brand_protection=None, email_security=None, network_security=None, phishing=None, website_security=None, _configuration=None):  # noqa: E501
        """CategoryScores - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._brand_protection = None
        self._email_security = None
        self._network_security = None
        self._phishing = None
        self._website_security = None
        self.discriminator = None

        if brand_protection is not None:
            self.brand_protection = brand_protection
        if email_security is not None:
            self.email_security = email_security
        if network_security is not None:
            self.network_security = network_security
        if phishing is not None:
            self.phishing = phishing
        if website_security is not None:
            self.website_security = website_security

    @property
    def brand_protection(self):
        """Gets the brand_protection of this CategoryScores.  # noqa: E501


        :return: The brand_protection of this CategoryScores.  # noqa: E501
        :rtype: int
        """
        return self._brand_protection

    @brand_protection.setter
    def brand_protection(self, brand_protection):
        """Sets the brand_protection of this CategoryScores.


        :param brand_protection: The brand_protection of this CategoryScores.  # noqa: E501
        :type: int
        """

        self._brand_protection = brand_protection

    @property
    def email_security(self):
        """Gets the email_security of this CategoryScores.  # noqa: E501


        :return: The email_security of this CategoryScores.  # noqa: E501
        :rtype: int
        """
        return self._email_security

    @email_security.setter
    def email_security(self, email_security):
        """Sets the email_security of this CategoryScores.


        :param email_security: The email_security of this CategoryScores.  # noqa: E501
        :type: int
        """

        self._email_security = email_security

    @property
    def network_security(self):
        """Gets the network_security of this CategoryScores.  # noqa: E501


        :return: The network_security of this CategoryScores.  # noqa: E501
        :rtype: int
        """
        return self._network_security

    @network_security.setter
    def network_security(self, network_security):
        """Sets the network_security of this CategoryScores.


        :param network_security: The network_security of this CategoryScores.  # noqa: E501
        :type: int
        """

        self._network_security = network_security

    @property
    def phishing(self):
        """Gets the phishing of this CategoryScores.  # noqa: E501


        :return: The phishing of this CategoryScores.  # noqa: E501
        :rtype: int
        """
        return self._phishing

    @phishing.setter
    def phishing(self, phishing):
        """Sets the phishing of this CategoryScores.


        :param phishing: The phishing of this CategoryScores.  # noqa: E501
        :type: int
        """

        self._phishing = phishing

    @property
    def website_security(self):
        """Gets the website_security of this CategoryScores.  # noqa: E501


        :return: The website_security of this CategoryScores.  # noqa: E501
        :rtype: int
        """
        return self._website_security

    @website_security.setter
    def website_security(self, website_security):
        """Sets the website_security of this CategoryScores.


        :param website_security: The website_security of this CategoryScores.  # noqa: E501
        :type: int
        """

        self._website_security = website_security

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CategoryScores, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CategoryScores):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CategoryScores):
            return True

        return self.to_dict() != other.to_dict()
