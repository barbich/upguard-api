# coding: utf-8

"""
    UpGuard CyberRisk API

    Access information from the CyberRisk platform programmatically using this API.  You can find or generate an API key to access this API in your CyberRisk Account Settings. Please authorize all requests by setting the \"Authorization\" header to your api key.  The base url for all public endpoints is https://cyber-risk.upguard.com/api/public  # noqa: E501

    OpenAPI spec version: 1.11.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from upguard.configuration import Configuration


class Diff(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_a': 'datetime',
        'date_b': 'datetime',
        'expected': 'str',
        'hostname': 'str',
        'meta_value_a': 'str',
        'meta_value_b': 'str',
        '_property': 'str',
        'status_a': 'DiffStatus',
        'status_b': 'DiffStatus'
    }

    attribute_map = {
        'date_a': 'dateA',
        'date_b': 'dateB',
        'expected': 'expected',
        'hostname': 'hostname',
        'meta_value_a': 'metaValueA',
        'meta_value_b': 'metaValueB',
        '_property': 'property',
        'status_a': 'statusA',
        'status_b': 'statusB'
    }

    def __init__(self, date_a=None, date_b=None, expected=None, hostname=None, meta_value_a=None, meta_value_b=None, _property=None, status_a=None, status_b=None, _configuration=None):  # noqa: E501
        """Diff - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._date_a = None
        self._date_b = None
        self._expected = None
        self._hostname = None
        self._meta_value_a = None
        self._meta_value_b = None
        self.__property = None
        self._status_a = None
        self._status_b = None
        self.discriminator = None

        if date_a is not None:
            self.date_a = date_a
        if date_b is not None:
            self.date_b = date_b
        if expected is not None:
            self.expected = expected
        if hostname is not None:
            self.hostname = hostname
        if meta_value_a is not None:
            self.meta_value_a = meta_value_a
        if meta_value_b is not None:
            self.meta_value_b = meta_value_b
        if _property is not None:
            self._property = _property
        if status_a is not None:
            self.status_a = status_a
        if status_b is not None:
            self.status_b = status_b

    @property
    def date_a(self):
        """Gets the date_a of this Diff.  # noqa: E501

        The date of the first scan (RFC 3339 format)  # noqa: E501

        :return: The date_a of this Diff.  # noqa: E501
        :rtype: datetime
        """
        return self._date_a

    @date_a.setter
    def date_a(self, date_a):
        """Sets the date_a of this Diff.

        The date of the first scan (RFC 3339 format)  # noqa: E501

        :param date_a: The date_a of this Diff.  # noqa: E501
        :type: datetime
        """

        self._date_a = date_a

    @property
    def date_b(self):
        """Gets the date_b of this Diff.  # noqa: E501

        The date of the second scan (RFC 3339 format)  # noqa: E501

        :return: The date_b of this Diff.  # noqa: E501
        :rtype: datetime
        """
        return self._date_b

    @date_b.setter
    def date_b(self, date_b):
        """Sets the date_b of this Diff.

        The date of the second scan (RFC 3339 format)  # noqa: E501

        :param date_b: The date_b of this Diff.  # noqa: E501
        :type: datetime
        """

        self._date_b = date_b

    @property
    def expected(self):
        """Gets the expected of this Diff.  # noqa: E501

        The expected status  # noqa: E501

        :return: The expected of this Diff.  # noqa: E501
        :rtype: str
        """
        return self._expected

    @expected.setter
    def expected(self, expected):
        """Sets the expected of this Diff.

        The expected status  # noqa: E501

        :param expected: The expected of this Diff.  # noqa: E501
        :type: str
        """

        self._expected = expected

    @property
    def hostname(self):
        """Gets the hostname of this Diff.  # noqa: E501

        The domain name or IP address experiencing the risk diff  # noqa: E501

        :return: The hostname of this Diff.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this Diff.

        The domain name or IP address experiencing the risk diff  # noqa: E501

        :param hostname: The hostname of this Diff.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def meta_value_a(self):
        """Gets the meta_value_a of this Diff.  # noqa: E501

        Metadata for the result of the first check  # noqa: E501

        :return: The meta_value_a of this Diff.  # noqa: E501
        :rtype: str
        """
        return self._meta_value_a

    @meta_value_a.setter
    def meta_value_a(self, meta_value_a):
        """Sets the meta_value_a of this Diff.

        Metadata for the result of the first check  # noqa: E501

        :param meta_value_a: The meta_value_a of this Diff.  # noqa: E501
        :type: str
        """

        self._meta_value_a = meta_value_a

    @property
    def meta_value_b(self):
        """Gets the meta_value_b of this Diff.  # noqa: E501

        Metadata for the result of the second check  # noqa: E501

        :return: The meta_value_b of this Diff.  # noqa: E501
        :rtype: str
        """
        return self._meta_value_b

    @meta_value_b.setter
    def meta_value_b(self, meta_value_b):
        """Sets the meta_value_b of this Diff.

        Metadata for the result of the second check  # noqa: E501

        :param meta_value_b: The meta_value_b of this Diff.  # noqa: E501
        :type: str
        """

        self._meta_value_b = meta_value_b

    @property
    def _property(self):
        """Gets the _property of this Diff.  # noqa: E501

        The property checked  # noqa: E501

        :return: The _property of this Diff.  # noqa: E501
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this Diff.

        The property checked  # noqa: E501

        :param _property: The _property of this Diff.  # noqa: E501
        :type: str
        """

        self.__property = _property

    @property
    def status_a(self):
        """Gets the status_a of this Diff.  # noqa: E501


        :return: The status_a of this Diff.  # noqa: E501
        :rtype: DiffStatus
        """
        return self._status_a

    @status_a.setter
    def status_a(self, status_a):
        """Sets the status_a of this Diff.


        :param status_a: The status_a of this Diff.  # noqa: E501
        :type: DiffStatus
        """

        self._status_a = status_a

    @property
    def status_b(self):
        """Gets the status_b of this Diff.  # noqa: E501


        :return: The status_b of this Diff.  # noqa: E501
        :rtype: DiffStatus
        """
        return self._status_b

    @status_b.setter
    def status_b(self, status_b):
        """Sets the status_b of this Diff.


        :param status_b: The status_b of this Diff.  # noqa: E501
        :type: DiffStatus
        """

        self._status_b = status_b

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Diff, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Diff):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Diff):
            return True

        return self.to_dict() != other.to_dict()
